{"version":3,"sources":["webpack:///webpack/bootstrap 80c7c8ba604d9eab3dc6","webpack:///./src/main.ts","webpack:///./src/config/kernel.ts","webpack:///external \"inversify\"","webpack:///external \"reflect-metadata\"","webpack:///./src/config/constants.ts","webpack:///./src/core/http-server.ts","webpack:///external \"restify\"","webpack:///external \"inversify-restify-utils\"","webpack:///./src/controllers/texts.ts","webpack:///./src/enums/source.ts","webpack:///./src/factories/text-reader.ts","webpack:///external \"fs\"","webpack:///external \"axios\"","webpack:///./src/controllers/highlight.ts","webpack:///./src/controllers/paragraphs.ts","webpack:///./src/services/texts/texts.ts","webpack:///external \"tesseract.js\"","webpack:///external \"jimp\"","webpack:///./src/services/paragraphs/paragraphs.ts","webpack:///./src/services/highlight/highlight.ts","webpack:///./src/core/app.ts","webpack:///./src/config/server-config.ts","webpack:///./src/core/logger-factory.ts","webpack:///external \"bunyan\"","webpack:///./src/db/index.ts","webpack:///external \"bluebird\"","webpack:///external \"pg-promise\"","webpack:///./src/db/repos/users.ts","webpack:///./src/db/sql/index.ts","webpack:///external \"path\"","webpack:///./src/db/repos/texts.ts","webpack:///./src/db/repos/highlights.ts","webpack:///./src/db/repos/paragraphs.ts"],"names":[],"mappings":"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","file":"/home/jeff/Documents/PerfectReader/dist/index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 80c7c8ba604d9eab3dc6","import { kernel } from './config/kernel'\nimport { HTTPServer } from './core/http-server'\nimport { __ } from './config/constants'\nimport IApp from './interfaces/app'\nvar Jimp = require('jimp')\n\nconst app = kernel.get<IApp>(__.App)\napp.bootstrap()\n\n\n\n// WEBPACK FOOTER //\n// ./src/main.ts","import { Kernel } from \"inversify\"\nimport \"reflect-metadata\";\nimport __ from \"../config/constants\";\nimport IApp from '../interfaces/app'\nimport IController from '../interfaces/controller'\nimport IServerConfig from '../interfaces/server-config'\nimport IHTTPServer from '../interfaces/http-server'\nimport { ITextsService } from '../interfaces/texts-service'\nimport { IHighlightService } from '../interfaces/highlight-service'\nimport { IParagraphsService} from '../interfaces/paragraphs-service'\nimport { HTTPServer } from '../core/http-server'\nimport { TextsController } from '../controllers/texts'\nimport { HighlightController } from '../controllers/highlight'\nimport { ParagraphsController } from '../controllers/paragraphs'\nimport { TextsService } from '../services/texts/texts'\nimport { ParagraphsService } from '../services/paragraphs/paragraphs'\nimport { HighlightService } from '../services/highlight/highlight'\nimport { TYPE } from 'inversify-restify-utils'\nimport { App } from '../core/app'\nimport { ServerConfig } from '../config/server-config'\nimport { LoggerFactory } from '../core/logger-factory'\nimport IDatabaseProvider from \"../interfaces/database-provider\";\nimport DatabaseProvider from \"../db\";\nimport {IDatabase} from \"pg-promise\";\nimport {IExtensions} from \"../db/index\";\n\nexport const kernel = new Kernel();\n\nkernel\n    .bind<LoggerFactory>(__.LoggerFactory)\n    .toConstantValue(LoggerFactory)\n\nkernel.bind<IServerConfig>(__.ServerConfig)\n    .toConstantValue(<IServerConfig>ServerConfig)\nkernel\n    .bind<IHTTPServer>(__.HTTPServer)\n    .to(HTTPServer)\n    .inSingletonScope()\n\nkernel\n    .bind<IDatabaseProvider>(__.DatabaseProvider)\n    .to(DatabaseProvider)\n    .inSingletonScope();\nkernel\n    .bind<IDatabase<IExtensions>>(__.Database)\n    .toConstantValue(kernel.get<IDatabaseProvider>(__.DatabaseProvider).getDatabase());\n\nkernel\n    .bind<IController>(<any>TYPE.Controller)\n    .to(TextsController)\n    .whenTargetNamed('TextsController')\n    \nkernel\n    .bind<IController>(<any>TYPE.Controller)\n    .to(ParagraphsController)\n    .whenTargetNamed('ParagraphsController')\n\nkernel\n    .bind<IController>(<any>TYPE.Controller)\n    .to(HighlightController)\n    .whenTargetNamed('HighlightController')\n\nkernel\n    .bind<ITextsService>(__.TextsService)\n    .to(TextsService)\n    .inSingletonScope()\n\nkernel\n    .bind<IParagraphsService>(__.ParagraphsService)\n    .to(ParagraphsService)\n    .inSingletonScope()\n\nkernel\n    .bind<IHighlightService>(__.HighlightService)\n    .to(HighlightService)\n    .inSingletonScope()\n\nkernel.bind<IApp>(__.App)\n    .to(App)\n\n\n// WEBPACK FOOTER //\n// ./src/config/kernel.ts","module.exports = require(\"inversify\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"inversify\"\n// module id = 2\n// module chunks = 0","module.exports = require(\"reflect-metadata\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"reflect-metadata\"\n// module id = 3\n// module chunks = 0","export const __ = {\n    App: Symbol('App'),\n\n    DatabaseProvider: Symbol('DatabaseProvider'),\n    Database: Symbol('Database'),\n\n    Logger: Symbol('Logger'),\n    LoggerFactory: Symbol('LoggerFactory'),\n\n    HTTPServer: Symbol('HTTPServer'),\n    ServerConfig: Symbol('ServerConfig'),\n    // Router: Symbol('Router'),\n\n    // UserService: Symbol('UserService'),\n    // SessionService: Symbol('SessionService'),\n    // CacheService: Symbol('CacheService'),\n    TextsService: Symbol(\"ITextsService\"),\n    ParagraphsService: Symbol(\"IParagraphsService\"),\n    HighlightService: Symbol(\"IHighlightService\"),\n    TextGetter: Symbol(\"ITextGetter\"),\n    TextReader: Symbol(\"ITextReader\"),\n\n}\n\nexport const API_BASE = '/api/';\n\nexport default __\n\n\n\n// WEBPACK FOOTER //\n// ./src/config/constants.ts","import { injectable, inject } from \"inversify\"\nimport IBootstrap from '../interfaces/bootstrap'\nimport IServerConfig from '../interfaces/server-config'\nimport IHTTPServer from '../interfaces/http-server'\nimport { Server, queryParser, bodyParser, CORS } from \"restify\"\nimport { InversifyRestifyServer } from \"inversify-restify-utils\"\nimport { kernel } from \"../config/kernel\"\nimport { __ } from \"../config/constants\"\nimport { LoggerFactory } from \"./logger-factory\"\nimport IReq from \"../interfaces/req\"\nimport IRes from \"../interfaces/res\"\nimport ILogger from \"../interfaces/logger\"\nimport ILoggerFactory from \"../interfaces/logger-factory\"\n\n@injectable()\nexport class HTTPServer implements IHTTPServer {\n    private server: Server;\n    private port: number;\n    private router: InversifyRestifyServer;\n    private _serverConfig: IServerConfig;\n    @inject(__.LoggerFactory) LoggerFactory: ILoggerFactory;\n    public logger: ILogger\n\n    public constructor(\n        @inject(__.ServerConfig) serverConfig: IServerConfig\n    ) {\n        this._serverConfig = serverConfig\n        this.port = this._serverConfig.port;\n        this.router = new InversifyRestifyServer(<any>kernel)\n    }\n\n    public get version(): string { return this.server.version }\n    public set version(version) { this.server.version = version }\n\n    public get name(): string { return this.server.name }\n    public set name(name) { this.server.name = name }\n\n    private toBootstrap: Array<IBootstrap> = [];\n    public onBootstrap(fn: (cb: (err: Error, res: any) => void) => void): Promise<any> {\n        return new Promise((resolve, reject) => {\n            this.toBootstrap.push(() => {\n                return fn((err, result) => err ? reject(err) : resolve(result))\n            })\n        })\n    }\n\n    public listen(): void {\n        this.logger = this.LoggerFactory.getLogger(this)\n        this.toBootstrap.forEach((fn) => {\n            fn()\n        });\n\n        this.server = <Server>this.router\n            .setConfig((app: Server) => {\n                app.pre((req: any, res: any, next: Function) => {\n                    req.start = Date.now();\n                    next()\n                });\n                app.use(CORS({\n                    origins: ['http://localhost:4200'],\n                    credentials: true\n                }));\n                app.use(queryParser())\n                app.use(bodyParser())\n            })\n            .build()\n\n\n        this.server.on('after', (req: IReq, res: IRes, route: string, err: Error) => {\n            err && err.name !== 'BadRequestError' && this.logger.error(err);\n            const request: string = this.logger['format'](req)\n            const start: any = req.start;\n            this.logger.info(`${request} status=${res.statusCode} time=${Date.now() - start}`)\n        });\n\n        this.server.on('uncaughtEception', (req: IReq, res: IRes, route: string, err: Error) => {\n            this.logger.fatal(`route=${route}`, err);\n            process.exit(1)\n        });\n\n        this.server.on('unhandledRejection', (req: IReq, res: IRes, route: string, err: Error) => {\n            this.logger.fatal(`route=${route}`, err);\n            process.exit(1)\n        });\n\n        this.server.on('InternalServer', (req: IReq, res: IRes, err: any, cb: Function) => {\n            this.logger.error(err);\n\n            // TODO InternalServerError Page\n            const page = `\n            <h1>sorry, this is broken right now... try again later?</h1>\n            ${true ? `<div style=\"background: #feeeee\">\n                <pre>${err.stack}</pre>\n              </div>` : ''}\n            `;\n\n            res.writeHead(500);\n            if (req.method === 'GET') {\n                res.end(page)\n            }\n            cb()\n        });\n\n        this.server.on('BadRequest', (req: any, res: any, err: any, cb: Function) => {\n            if (err.jse_cause) {\n                err.body.message = JSON.stringify({ errors: err.jse_cause.errors })\n            }\n            cb()\n        });\n\n        this.server.on('NotFound', (req: any, res: any, err: any, cb: Function) => {\n            // req.uuid = uuid()\n            console.log(\"Not found\");\n            req.start = Date.now()\n\n            const page = `\n            <h1>404</h1>\n            `;\n\n            res.writeHead(404);\n            res.end(page);\n            cb();\n        });\n\n        this.server.listen(this.port)\n    }\n    public close(cb: Function): void {\n        this.server.close(cb)\n    }\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/http-server.ts","module.exports = require(\"restify\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"restify\"\n// module id = 6\n// module chunks = 0","module.exports = require(\"inversify-restify-utils\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"inversify-restify-utils\"\n// module id = 7\n// module chunks = 0","import { Request, Response, Next } from \"restify\";\nimport { InversifyRestifyServer, Controller, Get, Post, Delete } from \"inversify-restify-utils\";\nimport { injectable, inject } from \"inversify\"\nimport { __ , API_BASE } from \"../config/constants\"\nimport IController from '../interfaces/controller'\nimport { ITextsService } from '../interfaces/texts-service'\nimport { Source } from '../enums/source'\nimport {TextReader} from '../factories/text-reader'\nimport ILoggerFactory  from '../interfaces/logger-factory'\nimport ILogger from '../interfaces/logger'\nimport { IParagraphsService } from '../interfaces/paragraphs-service'\nimport IReq from \"../interfaces/req\"\nimport IResult from '../interfaces/result'\n\n\n@Controller(`${API_BASE}/texts`)\n@injectable()\nexport class TextsController implements IController {\n    private logger: ILogger\n\n    constructor(\n        @inject(__.TextsService) private TextService: ITextsService,\n        @inject(__.LoggerFactory) private LoggerFactory : ILoggerFactory,\n        @inject(__.ParagraphsService) private ParagraphsService: IParagraphsService\n    ) {\n        this.logger = LoggerFactory.getLogger(this)\n    }\n    /**\n     * This route gets all the ID's of texts\n     * @param {string} req - Request from client\n     * @param {string} res -Response object\n     * @param {string} next -Send to next route\n     */\n    @Get('/')\n    private async index(req: IReq, res: Response, next: Next) {\n        this.logger.info(\"Getting All Texts\")\n        let result:any =\n            await this.TextService.getAll()\n          result = result.map((x:any) => x.id)\n        res.send(result)\n        return next()\n    }\n\n    //TODO OCR from web image\n    @Post('/ocr')\n    private async getTextFromOCR(req: IReq, res: Response, next: Next){\n        let result: any;\n        req.connection.setTimeout(10000000)\n        try{\n             const path: string | null\n                = req.body.path ? req.body.path : null\n            if ( !path ) { throw new Error(\"No path on Query\")}\n            const title: string | null\n                = req.body.title ? req.body.title : null\n            if ( !title ) { throw new Error(\"No title on Query\")}\n\n            result = await this.TextService.ocrTextFromFS(title, path)\n            res.send(200, result)\n        } catch(e){\n            this.logger.error(e)\n            res.send(e)\n        }\n    }\n    /**\n     * This route takes a text id and converts it to paragraphs and saves to DB in paragraphs table\n     * @param {string} req -\n     * @param {string} res -\n     * @param {string} next -\n     */\n    @Post('/convert')\n     private async toParagraph(req: IReq, res: Response, next: Next) {\n        this.logger.info(\"Converting\")\n        let result: IResult;\n        try{\n             const id: number | null\n                = req.body.id ? req.body.id : null\n            if ( !id ) { throw new Error(\"No Id on Query\")}\n\n            const id_exists = await this.ParagraphsService.findByID(id)\n            if ( !id_exists ) { throw new Error(\"ID not in DB\")}\n\n            const id_deleted = id_exists.deleted\n            if(id_deleted) { throw new Error(\"requested text is deleted\")}\n\n            const text = (await this.TextService.findByID(id)).text\n            const tr = new TextReader(Source.TEXT)\n            await tr.init(text)\n            tr.paragraphs.map(x =>{\n                this.ParagraphsService.add(id, x)\n            })\n            result = await this.ParagraphsService.getBook(id)\n            res.json(result)\n\n        } catch (e){\n            this.logger.error(e)\n            res.send(e)\n        }\n     }\n    /* Takes a text attached to the request and saves that text in the db\n     * @param {string} req - request.body = {title: string, text: string}\n     * @param {string} res -\n     * @param {string} next -\n     */\n    @Post('/add/raw')\n    private async addText(req: IReq, res:Response, next:Next){\n        this.logger.info(\"Adding Raw Text :  \" , req.body )\n        let result: IResult;\n        try{\n            const title: string | null\n                = req.body.title ? req.body.title : null\n            if ( !title ) { throw new Error(\"No Title on Query\")}\n\n            const text: string | null\n                = req.body.text ? req.body.text : null\n            if ( !text ) { throw new Error(\"No text on Query\") }\n\n            result = await this.TextService.add(title, text)\n            res.send(result)\n        } catch (e){\n            res.send(e)\n        }\n        return next()\n    }\n\n    /**\n     * Gets a text from the file system and saves it to the DB\n     * @param {string} req - request.body = {title: string, path: string}\n     * @param {string} res -\n     * @param {string} next -\n     */\n    @Post('/add/fs')\n    private async addTextFromFS(req: IReq, res:Response, next:Next){\n        this.logger.info(\"Adding Text from FS :  \" , req.body )\n        let result: IResult;\n        try{\n            const title: string | null\n                = req.body.title ? req.body.title : null\n            if ( !title ) { throw new Error(\"No Title on Query\")}\n            const path: string | null\n                    = req.body.path ? req.body.path : null\n            if ( !path ) { throw new Error(\"No path on Query\") }\n\n            result = await this.TextService.addTextFromFS(title,path)\n            res.send(result)\n        } catch (e){\n            this.logger.error(e)\n            res.send(e)\n        }\n        return next()\n    }\n\n    /**\n     * This route gets a text from a url and saves it into the DB (.txt only)\n     * @param {string} req - request.body = {title: string, url: string} ex: https://www.gutenberg.org/files/11/11-0.txt\n     * @param {string} res -\n     * @param {string} next -\n     */\n    @Post('/add/url')\n    private async addTextFromURL(req: IReq, res:Response, next:Next){\n        this.logger.info(\"Adding Text from URL :  \" , req.body )\n        let result: IResult;\n        try{\n            const title: string | null\n                = req.body.title ? req.body.title : null\n            if ( !title ) { throw new Error(\"No Title on Query\")}\n            const url: string | null\n                    = req.body.url ? req.body.url : null\n            if ( !url ) { throw new Error(\"No url on Query\") }\n\n            result = await this.TextService.addTextFromURL(title, url)\n            res.send(result)\n\n        } catch (e){\n            this.logger.error(e)\n            res.send(e)\n        }\n        return next()\n    }\n\n    /**\n     * Get a text by ID\n     * @param {string} req - request.body = {id: number}\n     * @param {string} res -\n     * @param {string} next -\n     */\n    @Post('/getID')\n    private async findByID (req: IReq, res:Response, next:Next){\n        this.logger.info(\"Getting Text with ID: \" , req.body )\n        const id: number | null\n                = req.body.id ? req.body.id : null\n            if ( !id ) { throw new Error(\"No Id on Query\")}\n\n        const response = (await this.TextService.findByID(id))\n        if(!response.deleted){\n            res.send(response)\n        } else {\n            this.logger.info(\"Requested resource has deleted flag\")\n            res.send(\"Resource found, but has deleted flag\")\n        }\n        return next()\n    }\n\n    /**\n     * Delete a text by ID\n     * @param {string} req - request.body = {id: number}\n     * @param {string} res -\n     * @param {string} next -\n     */\n    @Delete('/deleteID')\n    private async removeByID (req: IReq, res:Response, next:Next){\n        this.logger.info(\"Deleting ID :  \" , req.body )\n        // console.log(req.body.id)\n        // const id : number = req.body.id\n        // res.send( (await this.TextService.removeByID(id)))\n        let result: IResult;\n        try{\n            const id: number | null\n                = req.body.id ? req.body.id : null\n            if ( !id ) { throw new Error(\"No Id on Query\")}\n\n            const id_exists = await this.ParagraphsService.findByID(id)\n            if ( !id_exists ) { throw new Error(\"ID not in DB\")}\n\n            result = await this.TextService.removeByID(id)\n            res.send(result)\n\n        } catch (e){\n            this.logger.error(e)\n            res.send(e)\n        }\n        return next()\n    }\n\n    /**\n     * Update a text associated with an ID\n     * @param {string} req - request.body = {id: number}\n     * @param {string} res -\n     * @param {string} next -\n     */\n    @Post('/update/text')\n    private async update(req: IReq, res:Response, next:Next){\n        this.logger.info(\"Updating Text by ID\" , req.body)\n        let result:IResult;\n        try{\n            const id : number | null\n                = req.body.id ? req.body.id : null\n\n            if(!id){ throw new Error(\"No id on query\")}\n\n            const id_exists : any | null\n                = await this.TextService.findByID(id)\n\n            if(!id_exists){throw new Error(\"id not in db\")}\n\n            const text: string | null\n                = (req.body.text && req.body.text.length > 0 )\n                ? req.body.text\n                : null\n\n            if(!text){ throw new Error(\"No text\")}\n\n            result = await this.TextService.updateText(id, text)\n            res.send(result)\n\n        } catch(e){\n            this.logger.error(e)\n            res.send(e)\n        }\n    }\n\n    /**\n     * Update the title of a text given an ID and new title\n     * @param {string} req - request.body = {id: number, title: string}\n     * @param {string} res -\n     * @param {string} next -\n     */\n    @Post('/update/title')\n    private async updateTitle(req: IReq, res:Response, next:Next){\n        this.logger.info(\"Updating Title by ID: \" , req.body)\n        let result:IResult;\n        try{\n            const id : number | null\n                = req.body.id ? req.body.id : null\n\n            if(!id){ throw new Error(\"No id on query\")}\n\n            const id_exists : any | null\n                = await this.TextService.findByID(id)\n\n            if(!id_exists){throw new Error(\"id not in db\")}\n\n            const title: string | null\n                = (req.body.title && req.body.title.length > 0 )\n                ? req.body.title\n                : null\n\n            if(!title){ throw new Error(\"No title on query\")}\n\n            result = await this.TextService.updateTitle(id, title)\n            res.send(result)\n\n        } catch(e){\n            this.logger.error(e)\n            res.send(e)\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/controllers/texts.ts","export enum Source {\n    FS = 1,\n    HTTP,\n    TEXT\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/enums/source.ts","import { injectable, inject } from \"inversify\"\nimport Raw  from '../interfaces/raw'\nimport Paragraphs from '../interfaces/paragraphs'\nimport { Text } from '../interfaces/text'\nimport { Source } from '../enums/source'\nimport * as fs from 'fs'\nimport axios from 'axios'\nimport { ITextReader } from '../interfaces/text-reader'\nimport { ITextGetter } from '../interfaces/text-getter'\n\n@injectable()\nexport class TextReader implements ITextReader {\n    public _contents: Text\n    public init: Function\n    private _RawText: ITextGetter\n    public _raw: Raw\n    constructor(src: Source){\n        switch(src){\n            case Source.FS:\n                this.init = this.initType( new FileText().get)\n                break;\n            case Source.TEXT: \n                this.init = this.initType( new RawText().get)\n                break;\n            case Source.HTTP:\n                this.init =  this.initType( new UrlText().get)\n                break;\n        }\n    }\n    private initType: Function = ( get: Function) => async (text: Raw) => {\n        const raw = await get(text)\n        const paragraphs:Paragraphs = TextProcessor.toParagraph(raw)\n        this._contents = {raw, paragraphs}        \n    }\n    get contents(): Text {\n        return this._contents\n    }\n    get paragraphs(): Paragraphs {\n        return this._contents.paragraphs\n    }\n}\n\nexport class TextProcessor {\n    public static toParagraph(text: Raw): Paragraphs {\n        return text\n            .split(/(?:\\r\\n\\r\\n|\\r\\r|\\n\\n)/g)\n            .map(x => x.replace(/(?:\\r\\n)/g, \"\"))\n            .map(x => x.trim())\n            .filter(x => x !== '')\n    }\n}\n\n@injectable()\nexport class RawText implements ITextGetter {\n    public get(text: Raw){ return Promise.resolve(text) } \n}\n\n@injectable()\nexport class FileText implements ITextGetter {\n    public get(path: string): Promise<Raw> {\n        return new Promise<Raw>((resolve, reject) => {\n            fs.readFile(path, 'utf8', (err: Error, contents: Raw) => err ? reject(err): resolve(contents)) \n        })\n    }\n}\n\n@injectable()\nexport class UrlText implements ITextGetter {\n    public get(url: string) : Promise<Raw> {\n        return new Promise<Raw>((resolve, reject) => {\n            axios.get(url)\n                .then((response) => resolve(response.data), reject)\n                .catch((err) => reject(err))\n        })\n    }\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/factories/text-reader.ts","module.exports = require(\"fs\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"fs\"\n// module id = 11\n// module chunks = 0","module.exports = require(\"axios\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"axios\"\n// module id = 12\n// module chunks = 0","import { Request, Response, Next } from \"restify\";\nimport { InversifyRestifyServer, Controller, Get, Post, Delete } from \"inversify-restify-utils\";\nimport { injectable, inject,  } from \"inversify\"\nimport { __ , API_BASE } from \"../config/constants\"\nimport IController from '../interfaces/controller'\nimport ILoggerFactory  from '../interfaces/logger-factory'\nimport ILogger from '../interfaces/logger'\nimport { IHighlightService } from \"../interfaces/highlight-service\"\nimport IReq from '../interfaces/req'\nimport IResult from '../interfaces/result'\n\n@Controller(`${API_BASE}/highlights`)\n@injectable()\nexport class HighlightController implements IController {\n    private logger: ILogger\n\n    constructor(\n        @inject(__.LoggerFactory) private LoggerFactory : ILoggerFactory,\n        @inject(__.HighlightService) private HighlightService : IHighlightService\n    ) {\n        this.logger = LoggerFactory.getLogger(this)\n    }\n    /**\n     * This route gets all the highlights\n     * @param {string} req -\n     * @param {string} res -\n     * @param {string} next -\n     */\n    @Get('/')\n    private async index(req: IReq, res: Response, next: Next) {\n        this.logger.info(\"Getting all highlights\")\n        const result:IResult = await this.HighlightService.getAll()\n        res.send(result)\n        return next()\n    }\n    @Get('/get/book')\n    private async getBook ( req: IReq, res: Response, next: Next){\n        this.logger.info(\"Getting highlights from book\" , req.body)\n        let result: IResult;\n        try{\n            const book_id: number | null\n                = req.body.book_id ? req.body.book_id : null\n\n            if(!book_id){ throw new Error(\"No book_id on query\")}\n\n            result = await this.HighlightService.getBook(book_id)\n            res.json(result)\n        } catch(e){\n            this.logger.error(e)\n            res.send(e)\n        }\n    }\n\n    @Get('/get')\n    private async get(req: IReq, res:Response, next:Next){\n        this.logger.info('Getting highlight by id:' , req.body)\n        let result: IResult;\n        try{\n            const id: number | null\n                = req.body.id ? req.body.id : null\n\n            if(!id){ throw new Error(\"No id on query\")}\n\n            result = await this.HighlightService.get(id)\n            res.send(result)\n        } catch (e) {\n            this.logger.error(e)\n            res.send(e)\n        }\n    }\n    @Get('/get/paragraph')\n    private async getParagraph ( req: IReq, res: Response, next: Next){\n        this.logger.info(\"Getting all highlights in paragraph\" , req.body)\n        let result: IResult;\n        try{\n            const book_id: number | null\n                = req.body.book_id ? req.body.book_id : null\n\n            if(!book_id){ throw new Error(\"No book_id on query\")}\n            const paragraph_id: number | null\n                = req.body.paragraph_id ? req.body.paragraph_id : null\n\n            if(!book_id){ throw new Error(\"No book_id on query\")}\n            result = await this.HighlightService.getParagraph(book_id, paragraph_id)\n            res.json(result)\n        } catch(e){\n            this.logger.error(e)\n            res.send(e)\n        }\n    }\n    @Post('/add')\n    private async addHighlight(req: IReq, res:Response, next:Next){\n        this.logger.info('Adding highlight:' , req.body)\n        let result: IResult;\n        try{\n            const book_id: number | null\n                = req.body.book_id ? req.body.book_id : null\n\n            if(!book_id){ throw new Error(\"No book_id on query\")}\n\n            const book_id_exists : any | null\n                = await this.HighlightService.findByID(book_id)\n\n            if(!book_id_exists){ throw new Error(\"book_id not in db\")}\n\n            const paragraph_id: number | null\n                = req.body.paragraph_id ? req.body.paragraph_id : null\n\n            if(!book_id){ throw new Error(\"No paragraph_id on query\")}\n\n            const start: number | null\n                = req.body.start ? req.body.start : null\n\n            if(!start){ throw new Error(\"No start position on query\")}\n\n            const end: number | null\n                = req.body.end ? req.body.end : null\n\n            if(!end){ throw new Error(\"No end position on query\")}\n\n            const text: string | null\n                = (req.body.text && req.body.text.length > 0 )\n                ? req.body.text\n                : null\n\n            if(!text){ throw new Error(\"No text\")}\n\n            result = await this.HighlightService.add(book_id , paragraph_id, text, start, end)\n            res.send(result)\n        } catch (e) {\n            this.logger.error(e)\n            res.send(e)\n        }\n\n        return next()\n    }\n    @Post('/update/text')\n    private async update(req: IReq, res:Response, next:Next){\n        this.logger.info(\"Updating highlight: \" , req.body)\n        let result:IResult;\n        try{\n            const id : number | null\n                = req.body.id ? req.body.id : null\n\n            if(!id){ throw new Error(\"No id on query\")}\n            const id_exists : any | null\n                = await this.HighlightService.findByID(id)\n\n            if(!id_exists){throw new Error(\"id not in db\")}\n\n            const text: string | null\n                = (req.body.text && req.body.text.length > 0 )\n                ? req.body.text\n                : null\n\n            if(!text){ throw new Error(\"No text\")}\n\n            result = await this.HighlightService.update(id , text)\n            res.send(result)\n        } catch(e){\n            this.logger.error(e)\n            res.send(e)\n        }\n    }\n    @Delete('/deleteID')\n    private async removeByID (req: IReq, res:Response, next:Next){\n        this.logger.info(\"Deleting highlight :  \" , req.body )\n\n        let result:IResult;\n        try{\n            const id : number | null =\n                req.body.id ? req.body.id : null\n\n            const id_exists : any | null\n                = await this.HighlightService.findByID(id)\n\n            if(!id_exists){throw new Error(\"id not in db\")}\n\n            result = await this.HighlightService.removeByID(id)\n\n        } catch(e) {\n            this.logger.warn(e)\n            res.send(e)\n        }\n        res.send(result)\n        return next()\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/controllers/highlight.ts","import { Request, Response, Next } from \"restify\";\nimport { InversifyRestifyServer, Controller, Get, Post, Delete } from \"inversify-restify-utils\";\nimport { injectable, inject,  } from \"inversify\"\nimport { __ , API_BASE } from \"../config/constants\"\nimport IController from '../interfaces/controller'\nimport ILoggerFactory  from '../interfaces/logger-factory'\nimport ILogger from '../interfaces/logger'\nimport { IParagraphsService } from \"../interfaces/paragraphs-service\"\nimport IDBParagraph from '../interfaces/db-paragraph'\nimport IReq from '../interfaces/req'\nimport IResult from '../interfaces/result'\n\n@Controller(`${API_BASE}/paragraphs`)\n@injectable()\nexport class ParagraphsController implements IController {\n    private logger: ILogger\n\n    constructor(\n        @inject(__.LoggerFactory) private LoggerFactory : ILoggerFactory,\n        @inject(__.ParagraphsService) private ParagraphsService : IParagraphsService\n    ) {\n        this.logger = LoggerFactory.getLogger(this)\n    }\n\n    @Get('/')\n    private async index(req: IReq, res: Response, next: Next) {\n        this.logger.info(\"Getting all Paragraphs\")\n        const result:IResult = await this.ParagraphsService.getAll()\n        res.send(result)\n        return next()\n    }\n    @Post('/book')\n    private async getBook ( req: IReq, res: Response, next: Next){\n        this.logger.info(\"Getting all Paragraphs in book\" , req.body)\n        let result: IResult;\n        try{\n            const book_id: number | null\n                = req.body.book_id ? req.body.book_id : null\n\n            if(!book_id){ throw new Error(\"No book_id on query\")}\n\n            result = await this.ParagraphsService.getBook(book_id)\n\n            res.json(result)\n        } catch(e){\n            this.logger.error(e)\n            res.send(e)\n        }\n    }\n    @Post('/get')\n    private async get(req: IReq, res:Response, next:Next){\n        this.logger.info('Getting paragraph : ' , req.body)\n        let result: IResult;\n        try{\n            const id: number | null\n                = req.body.id ? req.body.id : null\n\n            if(!id){ throw new Error(\"No id on query\")}\n\n            result = await this.ParagraphsService.get(id)\n            res.send(result)\n        } catch (e) {\n            this.logger.error(e)\n            res.send(e)\n        }\n    }\n\n    @Post('/add')\n    private async addText(req: IReq, res:Response, next:Next){\n        this.logger.info('Adding paragraph :' , req.body)\n        let result: IResult;\n        try{\n            const book_id: number | null\n                = req.body.book_id ? req.body.book_id : null\n\n            if(!book_id){ throw new Error(\"No book_id on query\")}\n\n            const book_id_exists : IDBParagraph | null\n                = await this.ParagraphsService.findByID(book_id)\n\n            if(!book_id_exists){ throw new Error(\"book_id not in db\")}\n\n            const paragraph: string | null\n                = (req.body.paragraph && req.body.paragraph.length > 0 )\n                ? req.body.paragraph\n                : null\n\n            if(!paragraph){ throw new Error(\"No paragraph\")}\n\n            result = await this.ParagraphsService.add(book_id , paragraph)\n\n        } catch (e) {\n            res.send(e)\n        }\n        res.send(result)\n        return next()\n    }\n    @Post('/update')\n    private async update(req: IReq, res:Response, next:Next){\n        this.logger.info(\"Updating paragraph : \" , req.body)\n        let result:IResult;\n        try{\n            const id : number | null\n                = req.body.id ? req.body.id : null\n\n            if(!id){ throw new Error(\"No id on query\")}\n\n            const id_exists : IDBParagraph | null\n                = await this.ParagraphsService.findByID(id)\n\n            if(!id_exists){throw new Error(\"id not in db\")}\n            const paragraph: string | null\n                = (req.body.paragraph && req.body.paragraph.length > 0 )\n                ? req.body.paragraph\n                : null\n\n            if(!paragraph){ throw new Error(\"No paragraph\")}\n\n            result = await this.ParagraphsService.update(id, paragraph)\n            res.send(result)\n        } catch(e){\n            this.logger.error(e)\n            res.send(e)\n        }\n    }\n    @Delete('/deleteID')\n    private async removeByID (req: IReq, res:Response, next:Next){\n        this.logger.info(\"Deleting paragraph :  \" , req.body )\n        let result:IResult;\n        try{\n            const id : number | null =\n                req.body.id ? req.body.id : null\n\n            const id_exists : IDBParagraph | null\n                = await this.ParagraphsService.findByID(id)\n\n            if(!id_exists){throw new Error(\"id not in db\")}\n\n            result = await this.ParagraphsService.removeByID(id)\n\n        } catch(e) {\n            this.logger.warn(e)\n            res.send(e)\n        }\n        res.send(result)\n        return next()\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/controllers/paragraphs.ts","import { injectable, inject } from \"inversify\"\nimport { ITextsService } from '../../interfaces/texts-service'\nimport {IDatabase} from \"pg-promise\";\nimport { IExtensions } from \"../../db\";\nimport { __ } from '../../config/constants'\nimport { Source } from '../../enums/source'\nimport { ITextGetter } from '../../interfaces/text-getter'\nimport { TextReader } from '../../factories/text-reader'\nimport ILogger from \"../../interfaces/logger\";\nimport ILoggerFactory from \"../../interfaces/logger-factory\";\nimport * as fs from \"fs\";\nlet Tesseract = require('tesseract.js')\nlet Jimp = require('jimp')\n\n\n//TODO must find a way to fix JIMP asynchronicity\n//TODO how do we make the timeout period longer for ocrTextFromFS\n\n@injectable()\nexport class TextsService implements ITextsService {\n    @inject(__.Database) db: IDatabase<IExtensions> & IExtensions;\n    private logger: ILogger;\n\n    public constructor( @inject(__.LoggerFactory) LoggerFactory: ILoggerFactory) {\n        this.logger = LoggerFactory.getLogger(this)\n    }\n     public async onBootstrap() {\n        this.logger.info('create texts table');\n        await this.db.texts.create();\n    }\n    public async add(title:string , text:string){\n        return await this.db.texts.add(title, text)\n    }\n    public async addTextFromFS(title: string, path: string){\n        const textReader = new TextReader(Source.FS)\n        await textReader.init(path)\n        return await this.db.texts\n            .add(title, textReader.contents.raw)\n    }\n\n    public async ocrTextFromFS(title:string, path:string){\n        const filename = \"./temp.jpg\"\n        //TODO Remove converted image !\n        const processImg = async function(){\n            return new Promise((resolve:any, reject:any)=>{\n                Jimp.read(path, function(err:any, img:any){\n                    if(err) { reject(err)}\n                    img.greyscale().scale(0.75).write(filename)\n                    console.log(\"done\")\n                    resolve(\"Done\")                   \n                })\n            })\n        }\n        await processImg()\n        // Doing this as just a timeout\n        // Doing this makes the marker set error go away, why...\n        // It looks like the file isnt done being written \n        // (I did a test where i read file before and after/logged it to stdout )\n        await Jimp.read(\"./rfid.jpg\")\n        const text = await Tesseract.recognize(filename)\n                .progress((message:any) => console.log(message))\n                .catch((err:any) => console.error(err))\n                .then((result:any) => result)\n\n        console.log(\"Text\", text.text)\n\n        return await this.db.texts.add(title , text.text)\n     }\n\n    public async addTextFromURL( title: string, url: string){\n        const textReader = new TextReader(Source.HTTP)\n        await textReader.init(url)\n        return await this.db.texts\n            .add(title, textReader.contents.raw)\n    }\n    public async updateText( id: number, text: string){\n        return await this.db.texts.updateText(id, text)\n    }\n    public async updateTitle( id: number, title: string){\n        return await this.db.texts.updateTitle(id, title)\n    }\n    public async findByID(id: number){\n        return await this.db.texts.findByID(id)\n    }\n    public async removeByID(id: number){\n        return await this.db.texts.remove(id)\n    }\n    public async getAll(){\n        return await this.db.texts.getAll()\n    }\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/services/texts/texts.ts","module.exports = require(\"tesseract.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"tesseract.js\"\n// module id = 16\n// module chunks = 0","module.exports = require(\"jimp\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"jimp\"\n// module id = 17\n// module chunks = 0","import { injectable, inject } from \"inversify\"\nimport { IParagraphsService } from '../../interfaces/paragraphs-service'\nimport \"reflect-metadata\";\nimport {IDatabase} from \"pg-promise\";\nimport { IExtensions } from \"../../db\";\nimport ILogger from \"../../interfaces/logger\";\nimport ILoggerFactory from \"../../interfaces/logger-factory\";\nimport { __ } from '../../config/constants'\nimport Raw from '../../interfaces/raw'\nimport Paragraphs from '../../interfaces/paragraphs'\nimport IDBParagraph from '../../interfaces/db-paragraph'\n\n@injectable()\nexport class ParagraphsService implements IParagraphsService {\n    @inject(__.Database) db: IDatabase<IExtensions> & IExtensions;\n    private logger: ILogger;\n\n    public constructor( @inject(__.LoggerFactory) LoggerFactory: ILoggerFactory) {\n        this.logger = LoggerFactory.getLogger(this)\n    }\n    public async onBootstrap() {\n        this.logger.info('create paragraphs table');\n        await this.db.paragraphs.create();\n    }\n    public async add (book_id:number, paragraph: string) {\n        return await this.db.paragraphs.add(book_id, paragraph)\n    }\n    public async get(id: number){\n        return await this.db.paragraphs.get(id)\n    }\n    public async getAll(){\n        return await this.db.paragraphs.getAll()\n    }\n    public async findByID (book_id: number){\n        return await this.db.paragraphs.findByID(book_id)\n    }\n    public async removeByID(id: number){\n        return await this.db.paragraphs.remove(id)\n    }\n    public async update( id: number, paragraph: string){\n        return await this.db.paragraphs.update(id, paragraph)\n    }\n    public async getBook(book_id: number){\n        return await this.db.paragraphs.getBook(book_id)     \n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/services/paragraphs/paragraphs.ts","import { injectable, inject } from \"inversify\"\nimport { IHighlightService } from '../../interfaces/highlight-service'\nimport {IDatabase} from \"pg-promise\";\nimport { IExtensions } from \"../../db\";\nimport ILogger from \"../../interfaces/logger\";\nimport ILoggerFactory from \"../../interfaces/logger-factory\";\nimport { __ } from '../../config/constants'\nimport IResult from '../../interfaces/result'\n\n@injectable()\nexport class HighlightService implements IHighlightService {\n    @inject(__.Database) db: IDatabase<IExtensions> & IExtensions;\n    private logger: ILogger;\n\n    public constructor( @inject(__.LoggerFactory) LoggerFactory: ILoggerFactory) {\n        this.logger = LoggerFactory.getLogger(this)\n    }\n    public async onBootstrap() {\n        this.logger.info('create highlight table');\n        await this.db.highlights.create();\n    }\n    public async add (book_id:number, paragraph_id: number, text: string, start:number, end:number):Promise<IResult> {\n        return await this.db.highlights.add(book_id, paragraph_id, text, start, end)\n    }\n    public async get(id: number):Promise<IResult>{\n        return await this.db.highlights.get(id)\n    }\n    public async getAll():Promise<IResult>{\n        return await this.db.highlights.getAll()\n    }\n    public async findByID (id: number):Promise<IResult>{\n        return await this.db.highlights.findByID(id)\n    }\n    public async removeByID(id: number):Promise<IResult>{\n        return await this.db.highlights.remove(id)\n    }\n    public async update( id: number, text: string):Promise<IResult>{\n        return await this.db.highlights.update(id, text)\n    }\n    public async getBook(book_id: number):Promise<IResult>{\n        return await this.db.highlights.getBook(book_id)     \n    }\n    public async getParagraph(book_id:number, paragraph_id: number):Promise<IResult>{\n        return await this.db.highlights.getParagraph(book_id, paragraph_id)\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/services/highlight/highlight.ts","import { inject, injectable } from 'inversify'\nimport __ from \"../config/constants\"\nimport IApp from \"../interfaces/app\"\nimport IHTTPServer from '../interfaces/http-server'\nimport {ITextsService} from \"../interfaces/texts-service\"\nimport ILogger from \"../interfaces/logger\"\nimport ILoggerFactory from \"../interfaces/logger-factory\"\nimport { IParagraphsService } from '../interfaces/paragraphs-service'\nimport { IHighlightService } from '../interfaces/highlight-service'\n\n@injectable()\nexport class App implements IApp {\n    @inject(__.HTTPServer) httpServer: IHTTPServer\n    @inject(__.TextsService) textsService: ITextsService\n    @inject(__.ParagraphsService) paragraphsService: IParagraphsService  \n    @inject(__.HighlightService) highlightService: IHighlightService \n    public logger: ILogger\n    \n    constructor(@inject(__.LoggerFactory) LoggerFactory: ILoggerFactory) {\n        console.log(this.httpServer)\n    }\n    public async bootstrap(): Promise<Boolean>{\n        try{\n            this.httpServer.onBootstrap(this.textsService.onBootstrap.bind(this.textsService))\n            this.httpServer.onBootstrap(this.paragraphsService.onBootstrap.bind(this.paragraphsService))\n            this.httpServer.onBootstrap(this.highlightService.onBootstrap.bind(this.highlightService))\n        } catch (e) {\n            this.logger.fatal(e)\n        }\n        this.httpServer.listen()\n        return true\n    }\n    public close(){\n        this.httpServer.close(()=>{\n            console.log(\"Ending Server. Goodbye\")\n        })\n    }\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/app.ts","import IServerConfig from '../interfaces/server-config'\n\nexport const ServerConfig : IServerConfig = {\n port: 8080, \n name: \"Restify\", \n version: \"1.0\"\n}\n\n\n// WEBPACK FOOTER //\n// ./src/config/server-config.ts","import {createLogger, LoggerOptions, stdSerializers as serializers} from \"bunyan\";\nimport {injectable} from \"inversify\";\nimport ILogger from \"../interfaces/logger\";\n\n@injectable()\nexport class LoggerFactory {\n    private static makeDefaultConfig(): LoggerOptions {\n        return { name: '', serializers }\n    }\n    \n    private static makeConfig(name: string, options: LoggerOptions): LoggerOptions {\n       options.name = name;\n       return options\n    }\n\n    private static config: LoggerOptions = LoggerFactory.makeDefaultConfig();\n\n    private static createLogger(name: string): ILogger {\n        if (!LoggerFactory.loggers[name]) {\n            const logger: ILogger = createLogger(LoggerFactory.makeConfig(name, LoggerFactory.config));\n            logger['format'] = (req: any) => {\n              return `req=${req.uuid}${req.session ? ` session=${req.session}` : ''}`\n            };\n            LoggerFactory.loggers[name] = logger;\n        }\n\n        return LoggerFactory.loggers[name]\n    }\n\n    private static loggers: { [key: string]: ILogger } = {};\n\n    public static getLogger(name: Object): ILogger {\n        // Get the constructors name and add it to loggers\n        return LoggerFactory.createLogger(name.constructor.toString().match(/class ([\\w|_]+)/)[1])\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/logger-factory.ts","module.exports = require(\"bunyan\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"bunyan\"\n// module id = 23\n// module chunks = 0","import {injectable} from \"inversify\";\nimport * as promise from \"bluebird\";\nimport * as pgPromise from \"pg-promise\";\nimport { Repository as UsersRepository} from \"./repos/users\";\nimport { Repository as TextsRepository} from \"./repos/texts\";\nimport { Repository as HighlightsRepository} from \"./repos/highlights\";\nimport { Repository as ParagraphsRepository} from \"./repos/paragraphs\";\nimport IDatabaseProvider from \"../interfaces/database-provider\";\n\nexport interface IExtensions {\n    users: UsersRepository,\n    texts: TextsRepository,\n    paragraphs: ParagraphsRepository,\n    highlights: HighlightsRepository\n\n}\ndeclare type process = {\n    env: any\n}\n\n@injectable()\nclass DatabaseProvider implements IDatabaseProvider {\n    private db: pgPromise.IDatabase<IExtensions>&IExtensions;\n\n    public constructor() {\n        const options = {\n            promiseLib: promise,\n            extend: (obj: any) => {\n                obj.users = new UsersRepository(obj)\n                obj.texts = new TextsRepository(obj)\n                obj.paragraphs = new ParagraphsRepository(obj)\n                obj.highlights = new HighlightsRepository(obj)\n            }\n        };\n\n        const config = {\n            host: 'localhost',\n            port: 5432,\n            database: process.env.PG_DATABASE || 'postgres',\n            user: process.env.PG_USER || 'postgres',\n            password: process.env.PG_PASSWORD || 'postgres'\n        };\n\n        const pgp: pgPromise.IMain = pgPromise<IExtensions>(options);\n        this.db = <pgPromise.IDatabase<IExtensions>&IExtensions> pgp(config); // gross type cast\n    }\n\n    public getDatabase() {\n        return this.db;\n    }\n}\n\nexport default DatabaseProvider\n\n\n\n// WEBPACK FOOTER //\n// ./src/db/index.ts","module.exports = require(\"bluebird\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"bluebird\"\n// module id = 25\n// module chunks = 0","module.exports = require(\"pg-promise\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"pg-promise\"\n// module id = 26\n// module chunks = 0","import { IDatabase } from \"pg-promise\"\nimport sqlProvider from \"../sql\"\n\nconst sql = sqlProvider.users;\n\nexport class Repository {\n    private db: IDatabase<any>\n    \n    constructor(db: any){\n        this.db = db\n    }\n    public async create(){\n        return this.db.none(sql.create)\n    }\n    public async init(){\n        return this.db.tx('Init-Users', (t: any) => t.map(sql.init, null, (row: any) => row.id))\n    }\n    public async drop(){\n        return this.db.none(sql.drop)\n    }\n    public async empty(){\n        return this.db.none(sql.empty)\n    }\n    public async createUsersView(){\n        return this.db.none(sql.createUsersView)\n    }\n    public async add(user: Object){\n        return this.db.one(sql.add, user, (u: any) => u.id)\n    }\n    public async remove(id: number){\n        return this.db.result(sql.remove, id , (r: any) => r.rowcount)\n    }\n    public async find(id: number){\n        return this.db.oneOrNone('SELECT * from Users_View where id = $1', id)\n    }\n    public async findPasswordHashById(id: number): Promise<{password: string}> {\n        return this.db.oneOrNone('SELECT password from Users where id = $1', id)\n    }\n    public async all(){\n        return this.db.any('SELECT * from Users_View')\n    }\n    public async total(){\n        return this.db.one('SELECT count(*) FROM Users', [], (a: any) => +a.count)\n    }\n    public async updatePassword(password: string, id: number){\n        return this.db.oneOrNone(sql.updatePassword, [password, id] , (u: any) => u.id)\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/db/repos/users.ts","import { QueryFile } from \"pg-promise\"\nimport * as path from \"path\"\n\nexport class SQL_Helper { \n    public static readFile(file: string){\n        const fullpath: string = path.join('../src/db/sql', file)\n        const options = {\n            minify: true,\n            params: {\n                schema: 'public'\n            }\n        }\n        return new QueryFile(fullpath, options)\n    }\n}\nexport default {\n    users: {\n        create: SQL_Helper.readFile('users/create.sql'),\n        empty: SQL_Helper.readFile('users/empty.sql'),\n        init: SQL_Helper.readFile('users/init.sql'),\n        drop: SQL_Helper.readFile('users/drop.sql'),\n        add: SQL_Helper.readFile('users/add.sql'),\n        updatePassword: SQL_Helper.readFile('users/update-password.sql'),\n        createUsersView: SQL_Helper.readFile('users/users-viewsql'),\n        remove: SQL_Helper.readFile('users/remove.sql'),\n    },\n    texts: {\n       create: SQL_Helper.readFile('texts/create.sql'),\n       add: SQL_Helper.readFile('texts/add.sql'),\n       remove: SQL_Helper.readFile('texts/remove.sql'),\n       update: SQL_Helper.readFile('texts/update.sql'),\n       updateTitle: SQL_Helper.readFile('texts/update-title.sql')\n    },\n    paragraphs: {\n        create: SQL_Helper.readFile('paragraphs/create.sql'),\n        add: SQL_Helper.readFile('paragraphs/add.sql'),\n        remove: SQL_Helper.readFile('paragraphs/remove.sql'),\n        getBook: SQL_Helper.readFile('paragraphs/getBook.sql'),\n        update: SQL_Helper.readFile('paragraphs/update.sql')\n    },\n    highlights: {\n        create: SQL_Helper.readFile('highlights/create.sql'),\n        add: SQL_Helper.readFile('highlights/add.sql'),\n        getBook: SQL_Helper.readFile('highlights/getBook.sql'),\n        getParagraph: SQL_Helper.readFile('highlights/getParagraph.sql'),\n        remove: SQL_Helper.readFile('highlights/remove.sql'),\n        update: SQL_Helper.readFile('highlights/update.sql')\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/db/sql/index.ts","module.exports = require(\"path\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"path\"\n// module id = 29\n// module chunks = 0","import { IDatabase } from \"pg-promise\"\nimport sqlProvider from \"../sql\"\nimport IResult from '../../interfaces/result'\nconst sql = sqlProvider.texts;\n\nexport class Repository {\n    private db: IDatabase<any>\n    \n    constructor(db: any){\n        this.db = db\n    }\n    public async create(){\n        return this.db.none(sql.create)\n    }\n    public async add(title: string, text: string): Promise<Array<any>>{\n        return await this.db.any(sql.add, [title, text])\n    }\n    public async findByID ( id: number): Promise<IResult>{\n       return await this.db.oneOrNone('SELECT * from texts where id = $1', id)\n    }\n    public async remove(id: number): Promise<IResult>{\n        return this.db.result(sql.remove, id, (r: IResult) => r)\n    }\n    public async getAll(): Promise<any>{\n        return this.db.any('SELECT * from texts where deleted = false')\n    }\n    public async updateText(id: number, text: string):Promise<IResult>{\n        return this.db.result(sql.update, [id,text] , (r: IResult) => r.rows)\n    }\n    public async updateTitle(id: number, title: string):Promise<IResult>{\n        return this.db.result(sql.updateTitle, [id,title] , (r: IResult) => r.rows)\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/db/repos/texts.ts","import { IDatabase } from \"pg-promise\"\nimport sqlProvider from \"../sql\"\nimport IResult from \"../../interfaces/result\"\nconst sql = sqlProvider.highlights;\n\nexport class Repository {\n    private db: IDatabase<any>\n    \n    constructor(db: any){\n        this.db = db\n    }\n    public async create(){\n        return this.db.none(sql.create)\n    }\n    public async add(book_id: number, paragraph_id: number, text: string, start:number, end: number ){\n        return await this.db.result(sql.add, [book_id, paragraph_id, text, start, end], (r: any) => r)\n    }\n    public async findByID ( id: number){\n       return await this.db.oneOrNone('SELECT * from highlights where id = $1', id)\n    }\n    public async remove(id: number){\n        return this.db.result(sql.remove, id, (r: IResult) =>  r.rows)\n    }\n    public async update(id: number, text: string){\n        return this.db.result(sql.update, [id, text], (r: IResult) =>  r)\n    }\n    public async get(id: number){\n        return this.db.result('SELECT * from highlights where id=$1', id, (r:IResult) => r.rows)\n    }\n    public async getAll(){\n        return this.db.result('SELECT * from highlights', [], (r:IResult) => r.rows)\n    }\n    public async getBook(book_id: number){\n        return this.db.result(sql.getBook, book_id, (r:IResult) => r.rows)\n    }\n    public async getParagraph(book_id: number, paragraph_id: number){\n        return this.db.result(sql.getParagraph, [book_id, paragraph_id], (r:IResult) => r.rows)\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/db/repos/highlights.ts","import { IDatabase } from \"pg-promise\"\nimport sqlProvider from \"../sql\"\nimport IDBParagraph from '../../interfaces/db-paragraph'\nimport IResult from \"../../interfaces/result\"\nimport * as pgp from \"pg-promise\"\nconst sql = sqlProvider.paragraphs;\n\nexport class Repository {\n    private db: IDatabase<any>\n    \n    constructor(db: any){\n        this.db = db\n    }\n    public async create():Promise<any>{\n        return this.db.none(sql.create)\n    }\n    public async add(book_id: number, paragraph: string):Promise<IResult>{\n        return await this.db.result(sql.add, [book_id, paragraph], (r: IResult) => r.rows)\n    }\n    public async findByID ( id: number):Promise<any>{\n       return await this.db.oneOrNone('SELECT * from texts where id = $1', id)\n    }\n    public async remove(id: number):Promise<IResult>{\n        return this.db.result(sql.remove, id, (r: IResult) =>  r.rows)\n    }\n    public async update(id: number, paragraph: string):Promise<IResult>{\n        return this.db.result(sql.update, [id, paragraph], (r: IResult) =>  r.rows)\n    }\n    public async get(id: number):Promise<IResult>{\n        return this.db.result('SELECT * from paragraphs where id=$1', id, (r:IResult) => r.rows)\n    }\n    public async getAll():Promise<any>{\n        return this.db.result('SELECT * from paragraphs', [] , (r:IResult) => r.rows)\n    }\n    public async getBook(book_id: number):Promise<IResult>{\n        return this.db.result(sql.getBook, book_id, (r:IResult)=> r.rows)\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/db/repos/paragraphs.ts"],"sourceRoot":""}