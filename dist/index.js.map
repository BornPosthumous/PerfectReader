{"version":3,"sources":["webpack:///webpack/bootstrap f1809fb9d3c746991e38","webpack:///./src/main.ts","webpack:///./src/config/kernel.ts","webpack:///external \"inversify\"","webpack:///external \"reflect-metadata\"","webpack:///./src/config/constants.ts","webpack:///./src/core/http-server.ts","webpack:///external \"restify\"","webpack:///external \"inversify-restify-utils\"","webpack:///./src/controllers/texts.ts","webpack:///./src/enums/source.ts","webpack:///./src/factories/text-reader.ts","webpack:///external \"fs\"","webpack:///external \"axios\"","webpack:///./src/validate/index.ts","webpack:///external \"validator.ts/Validator\"","webpack:///external \"restify-errors\"","webpack:///./src/validate/validators/index.ts","webpack:///./src/validate/validators/text.ts","webpack:///external \"validator.ts/decorator/Validation\"","webpack:///./src/validate/validators/paragraphs.ts","webpack:///./src/validate/validators/highlight.ts","webpack:///./src/validate/validators/users.ts","webpack:///./src/controllers/highlight.ts","webpack:///./src/controllers/paragraphs.ts","webpack:///./src/services/texts/texts.ts","webpack:///external \"tesseract.js\"","webpack:///external \"jimp\"","webpack:///./src/services/paragraphs/paragraphs.ts","webpack:///./src/services/highlight/highlight.ts","webpack:///./src/core/app.ts","webpack:///./src/config/server-config.ts","webpack:///./src/core/logger-factory.ts","webpack:///external \"bunyan\"","webpack:///./src/db/index.ts","webpack:///external \"bluebird\"","webpack:///external \"pg-promise\"","webpack:///./src/db/repos/users.ts","webpack:///./src/db/sql/index.ts","webpack:///external \"path\"","webpack:///./src/db/repos/texts.ts","webpack:///./src/db/repos/highlights.ts","webpack:///./src/db/repos/paragraphs.ts","webpack:///./src/controllers/users.ts","webpack:///./src/services/user.ts","webpack:///external \"bcrypt\"","webpack:///./src/services/session.ts","webpack:///external \"jsonwebtoken\"","webpack:///external \"node-uuid\"","webpack:///./src/services/cache.ts","webpack:///external \"redis\""],"names":[],"mappings":"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","file":"/home/jeff/Documents/PR/dist/index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap f1809fb9d3c746991e38","console.log(\"Main\")\nimport { kernel } from './config/kernel'\nimport { HTTPServer } from './core/http-server'\nimport { __ } from './config/constants'\nimport IApp from './interfaces/app'\n\nconsole.log(\"APP\")\nconst app = kernel.get<IApp>(__.App)\nconsole.log(\"Bootstrapping\");\napp.bootstrap()\nconsole.log(\"Bootstrapped\")\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/main.ts","import { Kernel } from \"inversify\"\nimport \"reflect-metadata\";\nimport __ from \"../config/constants\";\nimport IApp from '../interfaces/app'\nimport IController from '../interfaces/controller'\nimport IServerConfig from '../interfaces/server-config'\nimport IHTTPServer from '../interfaces/http-server'\nimport { ITextsService } from '../interfaces/texts-service'\nimport { IHighlightService } from '../interfaces/highlight-service'\nimport { IParagraphsService} from '../interfaces/paragraphs-service'\nimport { HTTPServer } from '../core/http-server'\nimport { TextsController } from '../controllers/texts'\nimport { HighlightController } from '../controllers/highlight'\nimport { ParagraphsController } from '../controllers/paragraphs'\nimport { TextsService } from '../services/texts/texts'\nimport { ParagraphsService } from '../services/paragraphs/paragraphs'\nimport { HighlightService } from '../services/highlight/highlight'\nimport { TYPE } from 'inversify-restify-utils'\nimport { App } from '../core/app'\nimport { ServerConfig } from '../config/server-config'\nimport { LoggerFactory } from '../core/logger-factory'\nimport IDatabaseProvider from \"../interfaces/database-provider\";\nimport DatabaseProvider from \"../db\";\nimport {IDatabase} from \"pg-promise\";\nimport {IExtensions} from \"../db/index\";\nimport UsersController from \"../controllers/users\";\nimport IUserService from \"../interfaces/user-service\";\nimport UserService from \"../services/user\";\nimport ISessionService from \"../interfaces/session-service\";\nimport SessionService from \"../services/session\";\nimport ICacheService from \"../interfaces/cache-service\";\nimport CacheService from \"../services/cache\";\n\nexport const kernel = new Kernel();\n\nkernel\n    .bind<LoggerFactory>(__.LoggerFactory)\n    .toConstantValue(LoggerFactory)\n\nkernel.bind<IServerConfig>(__.ServerConfig)\n    .toConstantValue(<IServerConfig>ServerConfig)\n\nkernel\n    .bind<IHTTPServer>(__.HTTPServer)\n    .to(HTTPServer)\n    .inSingletonScope()\n\nkernel\n    .bind<IDatabaseProvider>(__.DatabaseProvider)\n    .to(DatabaseProvider)\n    .inSingletonScope();\nkernel\n    .bind<IDatabase<IExtensions>>(__.Database)\n    .toConstantValue(kernel.get<IDatabaseProvider>(__.DatabaseProvider).getDatabase());\n// UserService -\nkernel\n    .bind<IUserService>(__.UserService)\n    .to(UserService)\n    .inSingletonScope();\n\n// SessionService -\nkernel\n    .bind<ISessionService>(__.SessionService)\n    .to(SessionService)\n    .inSingletonScope();\n\n// CacheService -\nkernel\n.bind<ICacheService>(__.CacheService)\n    .to(CacheService)\n    .inSingletonScope();\n\nkernel\n    .bind<IController>(<any>TYPE.Controller)\n    .to(TextsController)\n    .whenTargetNamed('TextsController')\n\nkernel\n    .bind<IController>(<any>TYPE.Controller)\n    .to(ParagraphsController)\n    .whenTargetNamed('ParagraphsController')\n\nkernel\n    .bind<IController>(<any>TYPE.Controller)\n    .to(HighlightController)\n    .whenTargetNamed('HighlightController')\n\nkernel\n    .bind<ITextsService>(__.TextsService)\n    .to(TextsService)\n    .inSingletonScope()\n\nkernel\n    .bind<IParagraphsService>(__.ParagraphsService)\n    .to(ParagraphsService)\n    .inSingletonScope()\n\nkernel\n    .bind<IHighlightService>(__.HighlightService)\n    .to(HighlightService)\n    .inSingletonScope()\n\nkernel.bind<IController>(<any> TYPE.Controller)\n    .to(UsersController)\n    .whenTargetNamed('UsersController');\n\nkernel.bind<IApp>(__.App)\n    .to(App)\n\n\n\n// WEBPACK FOOTER //\n// ./src/config/kernel.ts","module.exports = require(\"inversify\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"inversify\"\n// module id = 2\n// module chunks = 0","module.exports = require(\"reflect-metadata\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"reflect-metadata\"\n// module id = 3\n// module chunks = 0","export const __ = {\n    App: Symbol('App'),\n\n    DatabaseProvider: Symbol('DatabaseProvider'),\n    Database: Symbol('Database'),\n\n    Logger: Symbol('Logger'),\n    LoggerFactory: Symbol('LoggerFactory'),\n\n    HTTPServer: Symbol('HTTPServer'),\n    ServerConfig: Symbol('ServerConfig'),\n    Router: Symbol('Router'),\n\n    UserService: Symbol('UserService'),\n    SessionService: Symbol('SessionService'),\n    CacheService: Symbol('CacheService'),\n    TextsService: Symbol(\"ITextsService\"),\n    ParagraphsService: Symbol(\"IParagraphsService\"),\n    HighlightService: Symbol(\"IHighlightService\"),\n    TextGetter: Symbol(\"ITextGetter\"),\n    TextReader: Symbol(\"ITextReader\"),\n\n}\n\nexport const API_BASE = '/api/';\n\nexport default __\n\n\n\n// WEBPACK FOOTER //\n// ./src/config/constants.ts","import { injectable, inject } from \"inversify\"\nimport IBootstrap from '../interfaces/bootstrap'\nimport IServerConfig from '../interfaces/server-config'\nimport IHTTPServer from '../interfaces/http-server'\nimport { Server, queryParser, bodyParser, CORS } from \"restify\"\nimport { InversifyRestifyServer } from \"inversify-restify-utils\"\nimport { kernel } from \"../config/kernel\"\nimport { __ } from \"../config/constants\"\nimport { LoggerFactory } from \"./logger-factory\"\nimport IReq from \"../interfaces/req\"\nimport IRes from \"../interfaces/res\"\nimport ILogger from \"../interfaces/logger\"\nimport ILoggerFactory from \"../interfaces/logger-factory\"\nimport ISessionService from \"../interfaces/session-service\"\n\n@injectable()\nexport class HTTPServer implements IHTTPServer {\n    private server: Server;\n    private port: number;\n    private router: InversifyRestifyServer;\n    private _serverConfig: IServerConfig;\n    session: any;\n    public logger: ILogger\n    LoggerFactory: any;\n    public constructor(\n        @inject(__.ServerConfig) serverConfig: IServerConfig,\n        @inject(__.SessionService) session: ISessionService,\n        @inject(__.LoggerFactory) LoggerFactory: ILoggerFactory,\n\n    ) {\n        this.session = session;\n        this._serverConfig = serverConfig\n        this.LoggerFactory = LoggerFactory\n        this.port = this._serverConfig.port;\n        this.router = new InversifyRestifyServer(<any>kernel)\n    }\n\n    public get version(): string { return this.server.version }\n    public set version(version) { this.server.version = version }\n\n    public get name(): string { return this.server.name }\n    public set name(name) { this.server.name = name }\n\n    private toBootstrap: Array<IBootstrap> = [];\n    public onBootstrap(fn: (cb: (err: Error, res: any) => void) => void): Promise<any> {\n        return new Promise((resolve, reject) => {\n            this.toBootstrap.push(() => {\n                return fn((err, result) => err ? reject(err) : resolve(result))\n            })\n        })\n    }\n\n    public listen(): void {\n        this.logger = this.LoggerFactory.getLogger(this)\n        this.toBootstrap.forEach((fn) => {\n            fn()\n        });\n\n        this.server = <Server>this.router\n            .setConfig((app: Server) => {\n                app.pre((req: any, res: any, next: Function) => {\n                    req.start = Date.now();\n                    this.logger.info(`Creating server`)\n\n                    next()\n                });\n                app.use(CORS())\n                app.use(queryParser())\n                app.use(bodyParser())\n            })\n            .build()\n\n\n        this.server.on('after', (req: IReq, res: IRes, route: string, err: Error) => {\n            err && err.name !== 'BadRequestError' && this.logger.error(err);\n            const request: string = this.logger['format'](req)\n            const start: any = req.start;\n            this.logger.info(`${request} status=${res.statusCode} time=${Date.now() - start}`)\n        });\n\n        this.server.on('uncaughtEception', (req: IReq, res: IRes, route: string, err: Error) => {\n            this.logger.fatal(`route=${route}`, err);\n            process.exit(1)\n        });\n\n        this.server.on('unhandledRejection', (req: IReq, res: IRes, route: string, err: Error) => {\n            this.logger.fatal(`route=${route}`, err);\n            process.exit(1)\n        });\n\n        this.server.on('InternalServer', (req: IReq, res: IRes, err: any, cb: Function) => {\n            this.logger.error(err);\n\n            // TODO InternalServerError Page\n            const page = `\n            <h1>sorry, this is broken right now... try again later?</h1>\n            ${true ? `<div style=\"background: #feeeee\">\n                <pre>${err.stack}</pre>\n              </div>` : ''}\n            `;\n\n            res.writeHead(500);\n            if (req.method === 'GET') {\n                res.end(page)\n            }\n            cb()\n        });\n\n        this.server.on('BadRequest', (req: any, res: any, err: any, cb: Function) => {\n            if (err.jse_cause) {\n                err.body.message = JSON.stringify({ errors: err.jse_cause.errors })\n            }\n            cb()\n        });\n\n        this.server.on('NotFound', (req: any, res: any, err: any, cb: Function) => {\n            // req.uuid = uuid()\n            req.start = Date.now()\n\n            const page = `\n            <h1>404</h1>\n            `;\n\n            res.writeHead(404);\n            res.end(page);\n            cb();\n        });\n\n        this.server.listen(this.port)\n    }\n    public close(cb: Function): void {\n        this.server.close(cb)\n    }\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/http-server.ts","module.exports = require(\"restify\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"restify\"\n// module id = 6\n// module chunks = 0","module.exports = require(\"inversify-restify-utils\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"inversify-restify-utils\"\n// module id = 7\n// module chunks = 0","import { Request, Response, Next } from \"restify\";\nimport { InversifyRestifyServer, Controller, Get, Post, Delete } from \"inversify-restify-utils\";\nimport { injectable, inject } from \"inversify\"\nimport { __ , API_BASE } from \"../config/constants\"\nimport IController from '../interfaces/controller'\nimport { ITextsService } from '../interfaces/texts-service'\nimport { Source } from '../enums/source'\nimport {TextReader} from '../factories/text-reader'\nimport ILoggerFactory  from '../interfaces/logger-factory'\nimport ILogger from '../interfaces/logger'\nimport { IParagraphsService } from '../interfaces/paragraphs-service'\nimport IReq from \"../interfaces/req\"\nimport IResult from '../interfaces/result'\nimport Validate from '../validate'\n\n@Controller(`${API_BASE}/texts`)\n@injectable()\nexport class TextsController implements IController {\n    private logger: ILogger\n\n    constructor( \n        @inject(__.TextsService) private TextService: ITextsService,\n        @inject(__.LoggerFactory) private LoggerFactory : ILoggerFactory,\n        @inject(__.ParagraphsService) private ParagraphsService: IParagraphsService\n    ) { \n        this.logger = LoggerFactory.getLogger(this)\n    }\n\n    @Get('/')\n    private async index(req: IReq, res: Response, next: Next) {\n        this.logger.info(\"Getting All Texts\")\n        let result:any = \n            await this.TextService.getAll()\n          result = result.map((x:any) => x.id)\n        res.send(result)\n        return next()\n    }\n\n    //TODO OCR from web image\n    //TODO FIX OCR route w/ validator\n    @Post('/ocr')\n    private async getTextFromOCR(req: IReq, res: Response, next: Next){\n        let result: any;\n        req.connection.setTimeout(10000000) //FIXME this is hacky way to keep request alive\n        try{\n             const path: string | null\n                = req.query.path ? req.query.path : null\n            if ( !path ) { throw new Error(\"No path on Query\")}\n            const title: string | null\n                = req.query.title ? req.query.title : null\n            if ( !title ) { throw new Error(\"No title on Query\")}\n            \n            result = await this.TextService.ocrTextFromFS(title, path)\n            res.send(200, result)\n        } catch(e){\n            this.logger.error(e)\n            res.send(e)\n        }\n    }\n    @Post('/convert')\n     private async toParagraph(req: IReq, res: Response, next: Next) {\n        this.logger.info(\"Converting\")\n        let result: IResult;\n        try{\n             const id: number | null \n                = req.query.id ? req.query.id : null\n            if ( !id ) { throw new Error(\"No Id on Query\")}\n\n            const id_exists = await this.ParagraphsService.findByID(id)\n            if ( !id_exists ) { throw new Error(\"ID not in DB\")}\n\n            const id_deleted = id_exists.deleted\n            if(id_deleted) { throw new Error(\"requested text is deleted\")}\n\n            // Should this logic go to the service?\n            const text = (await this.TextService.findByID(id)).text\n            const tr = new TextReader(Source.TEXT)\n            await tr.init(text)\n            tr.paragraphs.map(x =>{\n                this.ParagraphsService.add(id, x)\n            })\n            result = await this.ParagraphsService.getBook(id)\n            res.json(result)\n        } catch (e){\n            this.logger.error(e)\n            res.send(e)\n        }\n     }\n    \n    @Validate\n    @Post('/add/raw')\n    private async addText(req: IReq, res:Response, next:Next){\n        this.logger.info(\"Adding Raw Text :  \" , req.body )\n        let result: IResult;\n        try{            \n            result = await this.TextService.add(req.body.title, req.body.text)\n            res.send(200, result)\n        } catch (e){\n            res.send(e)\n        }\n        return next()\n    }\n\n    @Validate\n    @Post('/add/fs')\n    private async addTextFromFS(req: IReq, res:Response, next:Next){\n        this.logger.info(\"Adding Text from FS :  \" , req.body )\n        let result: IResult;\n        try{\n            result = await this.TextService.addTextFromFS(req.body.title, req.body.path)\n            res.send(200, result)\n        } catch (e){\n            this.logger.error(e)\n            res.send(e)\n        }\n        return next()\n    }\n    @Validate\n    @Post('/add/url')\n    private async addTextFromURL(req: IReq, res:Response, next:Next){\n        this.logger.info(\"Adding Text from URL :  \" , req.body )\n        let result: IResult;\n        try{            \n            result = await this.TextService.addTextFromURL(req.body.title, req.body.url)\n            res.send(200, result)\n        } catch (e){\n            this.logger.error(e)\n            res.send(e)\n        }\n        return next()\n    }\n    @Validate\n    @Post('/getID')\n    private async findByID (req: IReq, res:Response, next:Next){\n        this.logger.info(\"Getting Text with ID: \" , req.body)\n\n        //TODO Check if ID exists on getID route try catch\n\n        const response = (await this.TextService.findByID(req.body.id))\n\n        if(!response.deleted){ \n            res.send(200, response)\n        } else {\n            this.logger.info(\"Requested resource has deleted flag\") \n            res.send(\"Resource found, but has deleted flag\") \n        }\n        return next()\n    }\n\n    @Validate\n    @Delete('/deleteID')\n    private async removeByID (req: IReq, res:Response, next:Next){\n        this.logger.info(\"Deleting ID :  \" , req.body )\n        let result: IResult;\n        try{            \n            const id_exists = await this.ParagraphsService.findByID(req.body.id)\n            if ( !id_exists ) { throw new Error(\"ID not in DB\")}\n\n            result = await this.TextService.removeByID(req.body.id)\n            res.send(200, result)\n\n        } catch (e){\n            this.logger.error(e)\n            res.send(e)\n        }\n        return next()\n    }\n\n    @Validate\n    @Post('/update/text')\n    private async update(req: IReq, res:Response, next:Next){\n        this.logger.info(\"Updating Text by ID\" , req.body)\n        let result:IResult;\n        try{\n            const id_exists : any | null \n                = await this.TextService.findByID(req.body.id)\n            \n            if(!id_exists){throw new Error(\"ID not in db\")}\n            \n            result = await this.TextService.updateText(req.body.id, req.body.text)\n            res.send(result)\n\n        } catch(e){\n            this.logger.error(e)\n            res.send(e)\n        }\n    }\n\n    //TODO this route doesn't return the update object\n    @Validate\n    @Post('/update/title')\n    private async updateTitle(req: IReq, res:Response, next:Next){\n        this.logger.info(\"Updating Title by ID: \" , req.body)\n        let result:IResult;\n        try{\n            const id_exists : any | null \n                = await this.TextService.findByID(req.body.id)\n            \n            if(!id_exists){throw new Error(\"id not in db\")}\n            \n            result = await this.TextService.updateTitle(req.body.id, req.body.title)\n            res.send(result)\n\n        } catch(e){\n            this.logger.error(e)\n            res.send(e)\n        }\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/controllers/texts.ts","export enum Source {\n    FS = 1,\n    HTTP,\n    TEXT\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/enums/source.ts","import { injectable, inject } from \"inversify\"\nimport Raw  from '../interfaces/raw'\nimport Paragraphs from '../interfaces/paragraphs'\nimport { Text } from '../interfaces/text'\nimport { Source } from '../enums/source'\nimport * as fs from 'fs'\nimport axios from 'axios'\nimport { ITextReader } from '../interfaces/text-reader'\nimport { ITextGetter } from '../interfaces/text-getter'\n\n@injectable()\nexport class TextReader implements ITextReader {\n    public _contents: Text\n    public init: Function\n    private _RawText: ITextGetter\n    public _raw: Raw\n    constructor(src: Source){\n        switch(src){\n            case Source.FS:\n                this.init = this.initType( new FileText().get)\n                break;\n            case Source.TEXT: \n                this.init = this.initType( new RawText().get)\n                break;\n            case Source.HTTP:\n                this.init =  this.initType( new UrlText().get)\n                break;\n        }\n    }\n    private initType: Function = ( get: Function) => async (text: Raw) => {\n        const raw = await get(text)\n        const paragraphs:Paragraphs = TextProcessor.toParagraph(raw)\n        this._contents = {raw, paragraphs}        \n    }\n    get contents(): Text {\n        return this._contents\n    }\n    get paragraphs(): Paragraphs {\n        return this._contents.paragraphs\n    }\n}\n\nexport class TextProcessor {\n    public static toParagraph(text: Raw): Paragraphs {\n        return text\n            .split(/(?:\\r\\n\\r\\n|\\r\\r|\\n\\n)/g)\n            .map(x => x.replace(/(?:\\r\\n)/g, \"\"))\n            .map(x => x.trim())\n            .filter(x => x !== '')\n    }\n}\n\n@injectable()\nexport class RawText implements ITextGetter {\n    public get(text: Raw){ return Promise.resolve(text) } \n}\n\n@injectable()\nexport class FileText implements ITextGetter {\n    public get(path: string): Promise<Raw> {\n        return new Promise<Raw>((resolve, reject) => {\n            fs.readFile(path, 'utf8', (err: Error, contents: Raw) => err ? reject(err): resolve(contents)) \n        })\n    }\n}\n\n@injectable()\nexport class UrlText implements ITextGetter {\n    public get(url: string) : Promise<Raw> {\n        return new Promise<Raw>((resolve, reject) => {\n            axios.get(url)\n                .then((response) => resolve(response.data), reject)\n                .catch((err) => reject(err))\n        })\n    }\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/factories/text-reader.ts","module.exports = require(\"fs\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"fs\"\n// module id = 11\n// module chunks = 0","module.exports = require(\"axios\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"axios\"\n// module id = 12\n// module chunks = 0","import {Validator} from \"validator.ts/Validator\";\nimport {InternalServerError, BadRequestError} from \"restify-errors\";\nimport IReq from \"../interfaces/req\";\nimport  validators from \"./validators\";\n\nexport default function Validate(target: any, propertyKey: string, descriptor: TypedPropertyDescriptor<Function>) {\n    // Get the name of the valiator based on the contrller's constructor name and the method (route) we are accesing\n    // Ie ControllerName_routeName\n    //const validatorName = `${target.constructor.toString().match(/class ([\\w|_]+)/)[1]}_${propertyKey}`;\n\n    // Try to get a validator class that we have declared\n    // This uses a proxy, so it won't return undefined -- it will throw an error if the validator doesn't exist\n    // const ValidationClass = Reflect.get(validators, validatorName);\n\n    //TODO rename these? \n    // Validator now uses an object. \n    const validatorName = `${target.constructor.toString().match(/class ([\\w|_]+)/)[1]}`;\n    const ValidationSuper = Reflect.get(validators, validatorName)\n    const ValidationClass = Reflect.get(ValidationSuper, propertyKey)\n\n    // Store the original method, we're going to wrap it\n    const method = descriptor.value || function() {};\n\n    // We overwrite the route with our validation logic\n    descriptor.value = function (...args: Array<any>) {\n        // store references to req and next because we need to access them to serve a validation error\n        const req = args[0];\n        const next = args[args.length - 1];\n\n        try {\n            \n            // construct the validation object (class)\n            const validationRequest = getValidationRequest(ValidationClass, req);\n            \n            // init the validator (the thing that will check the validation)\n            const validator = new Validator();\n            \n            // Validate or throw, we'll serve the error in the catch block\n            validator.validateOrThrow(validationRequest);\n   \n            // if it passes validation, call the request with the original argmuents (i.e, req, res, next) -- \n            // proceed as normal            \n            method.call(this, ...args)\n        } catch (e) {\n            console.log(e)\n            // if we catch a vliadtion error, send it to the 400 error handler \n            if (e.name === 'ValidationError') {\n                return next(new BadRequestError(e))\n            }\n            \n            // something crazy happened, so serve a 500\n            next(new InternalServerError(e))\n        }\n    }\n}\n\ninterface Newable {\n    new(): any;\n}\n\nfunction getValidationRequest(Klass: Newable, req: IReq) {\n    const instance = new Klass();\n    // there has to be a req body to validate...\n    if (Reflect.get(req, 'body')) {\n        \n        // for the props in the body\n        for (let key in req.body) {\n            // don't write a null or undefined (i.e. prop exists w/o value)\n            if (Reflect.get(req.body, key)) {\n                const val = req.body[key];\n                // set it on the validation class we're currently building\n                Reflect.set(instance, key, String(val));\n            }\n        }\n    }\n\n    // return the validation class\n    return instance\n}\n\n\n// WEBPACK FOOTER //\n// ./src/validate/index.ts","module.exports = require(\"validator.ts/Validator\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"validator.ts/Validator\"\n// module id = 14\n// module chunks = 0","module.exports = require(\"restify-errors\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"restify-errors\"\n// module id = 15\n// module chunks = 0","import {IsLength, IsEmail, IsInt, NotEmpty, IsNumeric} from \"validator.ts/decorator/Validation\";\nimport TextsController from './text'\nimport ParagraphsController from './paragraphs'\nimport HighlightController from './highlight'\nimport UsersController from './users'\n//TODO Mimic behavior with new set up?\n// const validators = new Proxy(_validators, {\n//     get(target: any , name: string){\n//         console.log(\"Running valid\", _validators.TextsController)\n//         return name in target?\n//             target[name] : new Error(`Validator ${name} not found!`)\n//     }\n// })\n\nconst validators = {\n    TextsController,\n    ParagraphsController,\n    HighlightController,\n    UsersController\n};\n\nexport default validators\n\n\n// WEBPACK FOOTER //\n// ./src/validate/validators/index.ts","import {IsLength, IsEmail, IsInt, NotEmpty, IsNumeric} from \"validator.ts/decorator/Validation\";\n\n//TODO create validators for highlights and paragraph controllers\nclass findByID {\n    @IsNumeric()\n    id: string = ''\n}\n\nclass addText{\n    @NotEmpty()\n    title: string = ''\n\n    @NotEmpty()\n    text: string = ''\n}\n\nclass addTextFromFS {\n    @NotEmpty()\n    title: string = ''\n\n    @NotEmpty()\n    path: string = ''\n}\nclass addTextFromURL {\n    @NotEmpty()\n    title: string = ''\n\n    @NotEmpty()\n    url: string = ''\n}\n\nclass removeByID {\n    @IsNumeric()\n    id: string = ''\n}\n\nclass update {\n    @IsNumeric()\n    id: string = ''\n\n    @NotEmpty()\n    text: string = ''\n}\n\nclass updateTitle{\n    @IsNumeric()\n    id: string = ''\n    \n    @NotEmpty()\n    title: string = ''  \n}\n\nconst TextsController = {\n    update,\n    updateTitle,\n    removeByID,\n    addText,\n    addTextFromFS,\n    addTextFromURL,\n    findByID\n} \nexport default TextsController\n\n\n\n// WEBPACK FOOTER //\n// ./src/validate/validators/text.ts","module.exports = require(\"validator.ts/decorator/Validation\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"validator.ts/decorator/Validation\"\n// module id = 18\n// module chunks = 0","import { NotEmpty, IsNumeric } from \"validator.ts/decorator/Validation\";\n\nclass findByID {\n    @IsNumeric()\n    id: string = ''\n}\nclass addParagraph{\n    @IsNumeric()\n    book_id: string = ''\n\n    @NotEmpty()\n    paragraph: string = ''\n}\n\nclass removeByID {\n    @IsNumeric()\n    id: string = ''\n}\n\nclass update {\n    @IsNumeric()\n    id: string = ''\n\n    @NotEmpty()\n    paragraph: string = ''\n}\nclass getBook {\n    @IsNumeric()\n    book_id: string =''\n}\n\nconst ParagraphsController = {\n    update,\n    removeByID,\n    addParagraph,\n    findByID,\n    getBook\n} \nexport default ParagraphsController\n\n\n\n// WEBPACK FOOTER //\n// ./src/validate/validators/paragraphs.ts","import {NotEmpty, IsNumeric} from \"validator.ts/decorator/Validation\";\n\nclass findByID {\n    @IsNumeric()\n    id: string = ''\n}\nclass addHighlight{\n    @IsNumeric()\n    book_id: string = ''\n\n    @IsNumeric()\n    paragraph_id: string = ''\n    \n    @IsNumeric()\n    start: string = ''\n    \n    @IsNumeric()\n    end: string = ''\n\n    @NotEmpty()\n    text: string = ''\n}\nclass removeByID {\n    @IsNumeric()\n    id: string = ''\n}\nclass update {\n    @IsNumeric()\n    id: string = ''\n\n    @NotEmpty()\n    text: string = ''\n}\nclass getBook {\n    @IsNumeric()\n    book_id: string = ''\n}\nclass getParagraph {\n    @IsNumeric()\n    book_id: string = ''\n\n    @IsNumeric()\n    paragraph_id: string = ''\n}\nconst HighlightController = {\n    update,\n    removeByID,\n    getParagraph,\n    findByID,\n    addHighlight,\n    getBook\n} \nexport default HighlightController\n\n\n\n// WEBPACK FOOTER //\n// ./src/validate/validators/highlight.ts","import {IsLength, IsEmail} from \"validator.ts/decorator/Validation\";\nimport {IAddUserReq} from \"../../interfaces/user-service\";\n\nclass authenticate {\n    @IsEmail()\n    email: string = ''; // TODO: It sucks to have to initialize these\n\n    @IsLength(6, 20)\n    password: string = '';\n}\n\nclass create implements IAddUserReq {\n  @IsLength(3, 20)\n  fname: string = '';\n\n  @IsLength(3, 20)\n  lname: string = '';\n\n  @IsLength(6, 20)\n  username: string = '';\n\n  @IsLength(6, 20)\n  password: string = '';\n\n  @IsEmail()\n  email: string = '';\n}\n\n\nconst UsersController = {\n  authenticate, \n  create,\n};\n\nexport default UsersController\n\n\n// WEBPACK FOOTER //\n// ./src/validate/validators/users.ts","import { Request, Response, Next } from \"restify\";\nimport { InversifyRestifyServer, Controller, Get, Post, Delete } from \"inversify-restify-utils\";\nimport { injectable, inject,  } from \"inversify\"\nimport { __ , API_BASE } from \"../config/constants\"\nimport IController from '../interfaces/controller'\nimport ILoggerFactory  from '../interfaces/logger-factory'\nimport ILogger from '../interfaces/logger'\nimport { IHighlightService } from \"../interfaces/highlight-service\"\nimport IReq from '../interfaces/req'\nimport IResult from '../interfaces/result'\nimport Validate from '../validate'\n\n@Controller(`${API_BASE}/highlights`)\n@injectable()\nexport class HighlightController implements IController {\n    private logger: ILogger\n\n    constructor(\n        @inject(__.LoggerFactory) private LoggerFactory : ILoggerFactory,\n        @inject(__.HighlightService) private HighlightService : IHighlightService\n    ) {\n        this.logger = LoggerFactory.getLogger(this)\n    }\n\n    @Get('/')\n    private async index(req: IReq, res: Response, next: Next) {\n        this.logger.info(\"Getting all highlights\")\n        const result:IResult = await this.HighlightService.getAll()\n        res.send(result)\n        return next()\n    }\n    @Validate\n    @Post('/get/book')\n    private async getBook ( req: IReq, res: Response, next: Next){\n        this.logger.info(\"Getting highlights from book\" , req.body)\n        let result: IResult; \n        try{\n            result = await this.HighlightService.getBook(req.body.book_id)\n            res.json(result)\n        } catch(e){\n            this.logger.error(e)\n            res.send(e)\n        }\n    }\n    @Validate\n    @Post('/get')\n    private async findByID(req: IReq, res:Response, next:Next){\n        this.logger.info('Getting highlight by id:' , req.query)\n        let result: IResult; \n        try{\n            result = await this.HighlightService.get(req.body.id)\n            res.send(200, result)\n        } catch (e) {\n            this.logger.error(e)\n            res.send(e)\n        }\n    }\n    @Validate\n    @Post('/get/paragraph')\n    private async getParagraph ( req: IReq, res: Response, next: Next){\n        this.logger.info(\"Getting all highlights in paragraph\" , req.query)\n        let result: IResult; \n        try{\n            result = await this.HighlightService.getParagraph(req.body.book_id, req.body.paragraph_id)\n            res.json(result)\n        } catch(e){\n            this.logger.error(e)\n            res.send(e)\n        }\n    }\n    @Validate\n    @Post('/add')\n    private async addHighlight(req: IReq, res:Response, next:Next){\n        this.logger.info('Adding highlight:' , req.body)\n        let result: IResult; \n        try{\n\n            const book_id_exists : any | null \n                = await this.HighlightService.findByID(req.body.book_id)\n            \n            if(!book_id_exists){ throw new Error(\"book_id not in db\")}\n                \n            result = await this.HighlightService\n                .add(   req.body.book_id , \n                        req.body.paragraph_id, \n                        req.body.text,\n                        req.body.start, \n                        req.body.end ) \n            res.send(200, result)   \n        } catch (e) {\n            this.logger.error(e)\n            res.send(e)\n        }\n\n        return next()\n    }\n    @Validate\n    @Post('/update/text')\n    private async update(req: IReq, res:Response, next:Next){\n        this.logger.info(\"Updating highlight: \" , req.body)\n        let result:IResult;\n        try{\n            const id_exists : any | null \n                = await this.HighlightService.findByID(req.body.id)\n            \n            if(!id_exists){throw new Error(\"id not in db\")}\n            result = await this.HighlightService\n                .update(req.body.id , req.body.text)\n            \n            res.send(200, result)\n        } catch(e){\n            this.logger.error(e)\n            res.send(e)\n        }\n    }\n    @Validate\n    @Delete('/deleteID')\n    private async removeByID (req: IReq, res:Response, next:Next){\n        this.logger.info(\"Deleting highlight :  \" , req.body )\n        let result:IResult;\n        try{\n            const id_exists : any | null \n                = await this.HighlightService.findByID(req.body.id)\n            \n            if(!id_exists){throw new Error(\"id not in db\")}\n\n            result = await this.HighlightService.removeByID(req.body.id)\n            res.send(200, result)\n\n        } catch(e) { \n            this.logger.warn(e)\n            res.send(e)\n        }\n        return next()\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/controllers/highlight.ts","import { Request, Response, Next } from \"restify\";\nimport { InversifyRestifyServer, Controller, Get, Post, Delete } from \"inversify-restify-utils\";\nimport { injectable, inject,  } from \"inversify\"\nimport { __ , API_BASE } from \"../config/constants\"\nimport IController from '../interfaces/controller'\nimport ILoggerFactory  from '../interfaces/logger-factory'\nimport ILogger from '../interfaces/logger'\nimport { IParagraphsService } from \"../interfaces/paragraphs-service\"\nimport IDBParagraph from '../interfaces/db-paragraph'\nimport IReq from '../interfaces/req'\nimport IResult from '../interfaces/result'\nimport Validate from '../validate'\n@Controller(`${API_BASE}/paragraphs`)\n@injectable()\nexport class ParagraphsController implements IController {\n    private logger: ILogger\n\n    constructor(\n        @inject(__.LoggerFactory) private LoggerFactory : ILoggerFactory,\n        @inject(__.ParagraphsService) private ParagraphsService : IParagraphsService\n    ) {\n        this.logger = LoggerFactory.getLogger(this)\n    }\n\n    @Get('/')\n    private async index(req: IReq, res: Response, next: Next) {\n        this.logger.info(\"Getting all Paragraphs\")\n        const result:IResult = await this.ParagraphsService.getAll()\n        res.send(result)\n        return next()\n    }\n    @Validate\n    @Post('/book')\n    private async getBook ( req: IReq, res: Response, next: Next){\n        this.logger.info(\"Getting all Paragraphs in book\" , req.body)\n        let result: IResult; \n        try{\n            result = await this.ParagraphsService.getBook(req.body.book_id)\n            res.json(result)\n\n        } catch(e){\n            this.logger.error(e)\n            res.send(e)\n        }\n    }\n    @Validate\n    @Post('/getID')\n    private async findByID(req: IReq, res:Response, next:Next){\n        this.logger.info('Getting paragraph : ' , req.body)\n        let result: IResult; \n        try{\n            result = await this.ParagraphsService.get(req.body.id)\n            res.send(200, result)\n        } catch (e) {\n            this.logger.error(e)\n            res.send(e)\n        }\n    }\n    @Validate\n    @Post('/add')\n    private async addParagraph(req: IReq, res:Response, next:Next){\n        this.logger.info('Adding paragraph :' , req.body)\n        let result: IResult; \n        try{\n            const book_id_exists : IDBParagraph | null \n                = await this.ParagraphsService.findByID(req.body.book_id)\n            \n            if(!book_id_exists){ throw new Error(\"book_id not in db\")}\n                \n            result = await this.ParagraphsService.add(req.body.book_id , req.body.paragraph) \n                    \n        } catch (e) {\n            res.send(e)\n        }\n        res.send(result)\n        return next()\n    }\n    @Validate\n    @Post('/update')\n    private async update(req: IReq, res:Response, next:Next){\n        this.logger.info(\"Updating paragraph : \" , req.body)\n        let result:IResult;\n        try{\n            const id_exists : IDBParagraph | null \n                = await this.ParagraphsService.findByID(req.body.id)\n            \n            if(!id_exists){throw new Error(\"id not in db\")}\n\n            result = await this.ParagraphsService.update(req.body.id, req.body.paragraph)\n            res.send(result)\n        } catch(e){\n            this.logger.error(e)\n            res.send(e)\n        }\n    }\n    @Validate\n    @Delete('/deleteID')\n    private async removeByID (req: IReq, res:Response, next:Next){\n        this.logger.info(\"Deleting paragraph :  \" , req.body )\n        let result:IResult;\n        try{\n\n            const id_exists : IDBParagraph | null \n                = await this.ParagraphsService.findByID(req.body.id)\n            \n            if(!id_exists){throw new Error(\"id not in db\")}\n\n            result = await this.ParagraphsService.removeByID(req.body.id)\n\n        } catch(e) { \n            this.logger.warn(e)\n            res.send(e)\n        }\n        res.send(result)\n        return next()\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/controllers/paragraphs.ts","import { injectable, inject } from \"inversify\"\nimport { ITextsService } from '../../interfaces/texts-service'\nimport { IDatabase } from \"pg-promise\";\nimport { IExtensions } from \"../../db\";\nimport { __ } from '../../config/constants'\nimport { Source } from '../../enums/source'\nimport { ITextGetter } from '../../interfaces/text-getter'\nimport { TextReader } from '../../factories/text-reader'\nimport ILogger from \"../../interfaces/logger\";\nimport ILoggerFactory from \"../../interfaces/logger-factory\";\nimport * as fs from \"fs\";\nlet Tesseract = require('tesseract.js')\nlet Jimp = require('jimp')\n\n\n//TODO must find a way to fix JIMP asynchronicity\n//TODO how do we make the timeout period longer for ocrTextFromFS\n\n@injectable()\nexport class TextsService implements ITextsService {\n    db: any;\n    private logger: ILogger;\n\n    public constructor(\n        @inject(__.LoggerFactory) LoggerFactory: ILoggerFactory,\n        @inject(__.Database) db: IDatabase<IExtensions> & IExtensions\n    ) {\n        this.db = db;\n        this.logger = LoggerFactory.getLogger(this)\n    }\n    public async onBootstrap() {\n        this.logger.info('create texts table');\n        await this.db.texts.create();\n    }\n    public async add(title: string, text: string) {\n        return await this.db.texts.add(title, text)\n    }\n    public async addTextFromFS(title: string, path: string) {\n        const textReader = new TextReader(Source.FS)\n        await textReader.init(path)\n        return await this.db.texts\n            .add(title, textReader.contents.raw)\n    }\n\n    public async ocrTextFromFS(title: string, path: string) {\n        const filename = \"./temp.jpg\"\n        //TODO Remove converted image !\n        const processImg = async function() {\n            return new Promise((resolve: any, reject: any) => {\n                Jimp.read(path, function(err: any, img: any) {\n                    if (err) { reject(err) }\n                    img.greyscale().scale(0.75).write(filename)\n                    console.log(\"done\")\n                    resolve(\"Done\")\n                })\n            })\n        }\n        await processImg()\n        // Doing this as just a timeout\n        // Doing this makes the marker set error go away, why...\n        // It looks like the file isnt done being written \n        // (I did a test where i read file before and after/logged it to stdout )\n        await Jimp.read(\"./rfid.jpg\")\n        const text = await Tesseract.recognize(filename)\n            .progress((message: any) => console.log(message))\n            .catch((err: any) => console.error(err))\n            .then((result: any) => result)\n\n        console.log(\"Text\", text.text)\n\n        return await this.db.texts.add(title, text.text)\n    }\n\n    public async addTextFromURL(title: string, url: string) {\n        const textReader = new TextReader(Source.HTTP)\n        await textReader.init(url)\n        return await this.db.texts\n            .add(title, textReader.contents.raw)\n    }\n    public async updateText(id: number, text: string) {\n        return await this.db.texts.updateText(id, text)\n    }\n    public async updateTitle(id: number, title: string) {\n        return await this.db.texts.updateTitle(id, title)\n    }\n    public async findByID(id: number) {\n        return await this.db.texts.findByID(id)\n    }\n    public async removeByID(id: number) {\n        return await this.db.texts.remove(id)\n    }\n    public async getAll() {\n        return await this.db.texts.getAll()\n    }\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/services/texts/texts.ts","module.exports = require(\"tesseract.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"tesseract.js\"\n// module id = 25\n// module chunks = 0","module.exports = require(\"jimp\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"jimp\"\n// module id = 26\n// module chunks = 0","import { injectable, inject } from \"inversify\"\nimport { IParagraphsService } from '../../interfaces/paragraphs-service'\nimport \"reflect-metadata\";\nimport { IDatabase } from \"pg-promise\";\nimport { IExtensions } from \"../../db\";\nimport ILogger from \"../../interfaces/logger\";\nimport ILoggerFactory from \"../../interfaces/logger-factory\";\nimport { __ } from '../../config/constants'\nimport Raw from '../../interfaces/raw'\nimport Paragraphs from '../../interfaces/paragraphs'\nimport IDBParagraph from '../../interfaces/db-paragraph'\n\n@injectable()\nexport class ParagraphsService implements IParagraphsService {\n    private logger: ILogger;\n    db: any;\n    public constructor( @inject(__.LoggerFactory) LoggerFactory: ILoggerFactory,\n        @inject(__.Database) db: IDatabase<IExtensions> & IExtensions\n    ) {\n        this.db = db;\n        this.logger = LoggerFactory.getLogger(this)\n    }\n    public async onBootstrap() {\n        this.logger.info('create paragraphs table');\n        await this.db.paragraphs.create();\n    }\n    public async add(book_id: number, paragraph: string) {\n        return await this.db.paragraphs.add(book_id, paragraph)\n    }\n    public async get(id: number) {\n        return await this.db.paragraphs.get(id)\n    }\n    public async getAll() {\n        return await this.db.paragraphs.getAll()\n    }\n    public async findByID(book_id: number) {\n        return await this.db.paragraphs.findByID(book_id)\n    }\n    public async removeByID(id: number) {\n        return await this.db.paragraphs.remove(id)\n    }\n    public async update(id: number, paragraph: string) {\n        return await this.db.paragraphs.update(id, paragraph)\n    }\n    public async getBook(book_id: number) {\n        return await this.db.paragraphs.getBook(book_id)\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/services/paragraphs/paragraphs.ts","import { injectable, inject } from \"inversify\"\nimport { IHighlightService } from '../../interfaces/highlight-service'\nimport { IDatabase } from \"pg-promise\";\nimport { IExtensions } from \"../../db\";\nimport ILogger from \"../../interfaces/logger\";\nimport ILoggerFactory from \"../../interfaces/logger-factory\";\nimport { __ } from '../../config/constants'\nimport IResult from '../../interfaces/result'\n\n@injectable()\nexport class HighlightService implements IHighlightService {\n    private logger: ILogger;\n    db: any;\n    public constructor( @inject(__.LoggerFactory) LoggerFactory: ILoggerFactory,\n        @inject(__.Database) db: IDatabase<IExtensions> & IExtensions\n    ) {\n        this.db = db;\n        this.logger = LoggerFactory.getLogger(this)\n    }\n    public async onBootstrap() {\n        this.logger.info('create highlight table');\n        await this.db.highlights.create();\n    }\n    public async add(book_id: number, paragraph_id: number, text: string, start: number, end: number): Promise<IResult> {\n        return await this.db.highlights.add(book_id, paragraph_id, text, start, end)\n    }\n    public async get(id: number): Promise<IResult> {\n        return await this.db.highlights.get(id)\n    }\n    public async getAll(): Promise<IResult> {\n        return await this.db.highlights.getAll()\n    }\n    public async findByID(id: number): Promise<IResult> {\n        return await this.db.highlights.findByID(id)\n    }\n    public async removeByID(id: number): Promise<IResult> {\n        return await this.db.highlights.remove(id)\n    }\n    public async update(id: number, text: string): Promise<IResult> {\n        return await this.db.highlights.update(id, text)\n    }\n    public async getBook(book_id: number): Promise<IResult> {\n        return await this.db.highlights.getBook(book_id)\n    }\n    public async getParagraph(book_id: number, paragraph_id: number): Promise<IResult> {\n        return await this.db.highlights.getParagraph(book_id, paragraph_id)\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/services/highlight/highlight.ts","import { inject, injectable } from 'inversify'\nimport __ from \"../config/constants\"\nimport IApp from \"../interfaces/app\"\nimport IHTTPServer from '../interfaces/http-server'\nimport { ITextsService } from \"../interfaces/texts-service\"\nimport ILogger from \"../interfaces/logger\"\nimport ILoggerFactory from \"../interfaces/logger-factory\"\nimport { IParagraphsService } from '../interfaces/paragraphs-service'\nimport { IHighlightService } from '../interfaces/highlight-service'\nimport IUserService from '../interfaces/user-service'\nimport ICacheService from '../interfaces/cache-service'\n\n\n@injectable()\nexport class App implements IApp {\n\n\n    public logger: ILogger\n    httpServer: any;\n    textsService: any;\n    highlightService: any;\n    paragraphsService: any;\n    userService: any;\n    cache: any;\n\n    constructor( @inject(__.LoggerFactory) LoggerFactory: ILoggerFactory,\n        @inject(__.HTTPServer) httpServer: IHTTPServer,\n        @inject(__.TextsService) textsService: ITextsService,\n        @inject(__.ParagraphsService) paragraphsService: IParagraphsService,\n        @inject(__.HighlightService) highlightService: IHighlightService,\n        @inject(__.UserService) userService: IUserService,\n        @inject(__.CacheService) cache: ICacheService) {\n        this.httpServer = httpServer;\n        this.paragraphsService = paragraphsService;\n        this.textsService = textsService;\n        this.highlightService = highlightService;\n        this.userService = userService;\n        this.cache = cache;\n\n    }\n    public async bootstrap(): Promise<Boolean> {\n        try {\n            console.log(\"Bootstrapping user service\")\n            this.httpServer.onBootstrap(this.userService.onBootstrap.bind(this.userService));\n            this.httpServer.onBootstrap(this.cache.onBootstrap.bind(this.cache))\n            this.httpServer.onBootstrap(this.textsService.onBootstrap.bind(this.textsService))\n            this.httpServer.onBootstrap(this.paragraphsService.onBootstrap.bind(this.paragraphsService))\n            this.httpServer.onBootstrap(this.highlightService.onBootstrap.bind(this.highlightService))\n        } catch (e) {\n            this.logger.fatal(e)\n        }\n        this.httpServer.listen()\n        return true\n    }\n    public close() {\n        this.httpServer.close(() => {\n            console.log(\"Ending Server. Goodbye\")\n        })\n    }\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/app.ts","import IServerConfig from '../interfaces/server-config'\n\nexport const ServerConfig : IServerConfig = {\n port: 8080, \n name: \"Restify\", \n version: \"1.0\"\n}\n\n\n// WEBPACK FOOTER //\n// ./src/config/server-config.ts","import {createLogger, LoggerOptions, stdSerializers as serializers} from \"bunyan\";\nimport {injectable} from \"inversify\";\nimport ILogger from \"../interfaces/logger\";\n\n@injectable()\nexport class LoggerFactory {\n    private static makeDefaultConfig(): any {\n        return { name: '', serializers }\n    }\n    \n    private static makeConfig(name: string, options: LoggerOptions): LoggerOptions {\n       options.name = name;\n       return options\n    }\n\n    private static config: LoggerOptions = LoggerFactory.makeDefaultConfig();\n\n    private static createLogger(name: string): ILogger {\n        if (!LoggerFactory.loggers[name]) {\n            const logger: ILogger = createLogger(LoggerFactory.makeConfig(name, LoggerFactory.config));\n            logger['format'] = (req: any) => {\n              return `req=${req.uuid}${req.session ? ` session=${req.session}` : ''}`\n            };\n            LoggerFactory.loggers[name] = logger;\n        }\n\n        return LoggerFactory.loggers[name]\n    }\n\n    private static loggers: { [key: string]: ILogger } = {};\n\n    public static getLogger(name: Object): ILogger {\n        // Get the constructors name and add it to loggers\n        return LoggerFactory.createLogger(name.constructor.toString().match(/class ([\\w|_]+)/)[1])\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/logger-factory.ts","module.exports = require(\"bunyan\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"bunyan\"\n// module id = 32\n// module chunks = 0","import {injectable} from \"inversify\";\nimport * as promise from \"bluebird\";\nimport * as pgPromise from \"pg-promise\";\nimport { Repository as UsersRepository} from \"./repos/users\";\nimport { Repository as TextsRepository} from \"./repos/texts\";\nimport { Repository as HighlightsRepository} from \"./repos/highlights\";\nimport { Repository as ParagraphsRepository} from \"./repos/paragraphs\";\nimport IDatabaseProvider from \"../interfaces/database-provider\";\n\nexport interface IExtensions {\n    users: UsersRepository,\n    texts: TextsRepository,\n    paragraphs: ParagraphsRepository,\n    highlights: HighlightsRepository\n\n}\ndeclare type process = {\n    env: any\n}\n\n@injectable()\nclass DatabaseProvider implements IDatabaseProvider {\n    private db: pgPromise.IDatabase<IExtensions>&IExtensions;\n\n    public constructor() {\n        const options = {\n            promiseLib: promise,\n            extend: (obj: any) => {\n                obj.users = new UsersRepository(obj)\n                obj.texts = new TextsRepository(obj)\n                obj.paragraphs = new ParagraphsRepository(obj)\n                obj.highlights = new HighlightsRepository(obj)\n            }\n        };\n\n        const config = {\n            host: 'localhost',\n            port: 5432,\n            database: process.env.PG_DATABASE || 'postgres',\n            user: process.env.PG_USER || 'postgres',\n            password: process.env.PG_PASSWORD || 'postgres'\n        };\n\n        const pgp: pgPromise.IMain = pgPromise<IExtensions>(options);\n        this.db = <pgPromise.IDatabase<IExtensions>&IExtensions> pgp(config); // gross type cast\n    }\n\n    public getDatabase() {\n        return this.db;\n    }\n}\n\nexport default DatabaseProvider\n\n\n// WEBPACK FOOTER //\n// ./src/db/index.ts","module.exports = require(\"bluebird\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"bluebird\"\n// module id = 34\n// module chunks = 0","module.exports = require(\"pg-promise\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"pg-promise\"\n// module id = 35\n// module chunks = 0","import {IDatabase} from \"pg-promise\";\nimport sqlProvider from \"../sql\";\n\nconst sql = sqlProvider.users;\n\nexport class Repository {\n    private db: IDatabase<any>;\n\n    constructor(db: any) {\n        this.db = db;\n    }\n\n    public async create() {\n        return this.db.none(sql.create)\n    }\n\n    public async init() {\n        return this.db.tx('Init-Users', (t: any) => t.map(sql.init, null, (row: any) => row.id))\n    }\n\n    public async drop() {\n        return this.db.none(sql.drop)\n    }\n\n    public async empty() {\n        return this.db.none(sql.empty)\n    }\n    \n    public async createUsersView() {\n        return this.db.none(sql.createUsersView)\n    }\n\n    public async add(user: Object) {\n        return this.db.one(sql.add, user, (u: any) => u.id)\n    }\n\n    public async remove(id: number) {\n        return this.db.result(sql.remove, id, (r: any) => r.rowcount)\n    }\n\n    public async find(id: number) {\n        return this.db.oneOrNone('SELECT * from Users_View WHERE id = $1', id)\n    }\n    \n    public async findPasswordHashById(id: number): Promise<{password: string}> {\n        return this.db.oneOrNone('SELECT password from Users where id = $1', id)\n    }\n\n    public async findByEmail(email: String) {\n        return this.db.oneOrNone('SELECT * from Users_View WHERE email = $1', email)\n    }\n\n    public async all() {\n        return this.db.any('SELECT * from Users_View ')\n    }\n\n    public async total() {\n        return this.db.one('SELECT count(*) FROM Users', [], (a: any) => +a.count)\n    }\n\n    public async updatePassword(password: string, id: number) {\n        return this.db.oneOrNone(sql.updatePassword, [password, id], (u: any) => u.id)\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/db/repos/users.ts","import { QueryFile } from \"pg-promise\"\nimport * as path from \"path\"\n\nexport class SQL_Helper { \n    public static readFile(file: string){\n        const fullpath: string = path.join('../src/db/sql', file)\n        const options = {\n            minify: true,\n            params: {\n                schema: 'public'\n            }\n        }\n        return new QueryFile(fullpath, options)\n    }\n}\nexport default {\n    users: {\n        create: SQL_Helper.readFile('users/create.sql'),\n        empty: SQL_Helper.readFile('users/empty.sql'),\n        init: SQL_Helper.readFile('users/init.sql'),\n        drop: SQL_Helper.readFile('users/drop.sql'),\n        add: SQL_Helper.readFile('users/add.sql'),\n        updatePassword: SQL_Helper.readFile('users/update-password.sql'),\n        createUsersView: SQL_Helper.readFile('users/users-view.sql'),\n        remove: SQL_Helper.readFile('users/remove.sql'),\n    },\n    texts: {\n       create: SQL_Helper.readFile('texts/create.sql'),\n       add: SQL_Helper.readFile('texts/add.sql'),\n       remove: SQL_Helper.readFile('texts/remove.sql'),\n       update: SQL_Helper.readFile('texts/update.sql'),\n       updateTitle: SQL_Helper.readFile('texts/update-title.sql')\n    },\n    paragraphs: {\n        create: SQL_Helper.readFile('paragraphs/create.sql'),\n        add: SQL_Helper.readFile('paragraphs/add.sql'),\n        remove: SQL_Helper.readFile('paragraphs/remove.sql'),\n        getBook: SQL_Helper.readFile('paragraphs/getBook.sql'),\n        update: SQL_Helper.readFile('paragraphs/update.sql')\n    },\n    highlights: {\n        create: SQL_Helper.readFile('highlights/create.sql'),\n        add: SQL_Helper.readFile('highlights/add.sql'),\n        getBook: SQL_Helper.readFile('highlights/getBook.sql'),\n        getParagraph: SQL_Helper.readFile('highlights/getParagraph.sql'),\n        remove: SQL_Helper.readFile('highlights/remove.sql'),\n        update: SQL_Helper.readFile('highlights/update.sql')\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/db/sql/index.ts","module.exports = require(\"path\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"path\"\n// module id = 38\n// module chunks = 0","import { IDatabase } from \"pg-promise\"\nimport sqlProvider from \"../sql\"\nimport IResult from '../../interfaces/result'\nconst sql = sqlProvider.texts;\n\nexport class Repository {\n    private db: IDatabase<any>\n    \n    constructor(db: any){\n        this.db = db\n    }\n    public async create(){\n        return this.db.none(sql.create)\n    }\n    public async add(title: string, text: string): Promise<Array<any>>{\n        return await this.db.any(sql.add, [title, text])\n    }\n    public async findByID ( id: number): Promise<IResult>{\n       return await this.db.oneOrNone('SELECT * from texts where id = $1', id)\n    }\n    public async remove(id: number): Promise<IResult>{\n        return this.db.result(sql.remove, id, (r: IResult) => r)\n    }\n    public async getAll(): Promise<any>{\n        return this.db.any('SELECT * from texts where deleted = false')\n    }\n    public async updateText(id: number, text: string):Promise<IResult>{\n        return this.db.result(sql.update, [id,text] , (r: IResult) => r.rows)\n    }\n    public async updateTitle(id: number, title: string):Promise<IResult>{\n        return this.db.result(sql.updateTitle, [id,title] , (r: IResult) => r.rows)\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/db/repos/texts.ts","import { IDatabase } from \"pg-promise\"\nimport sqlProvider from \"../sql\"\nimport IResult from \"../../interfaces/result\"\nconst sql = sqlProvider.highlights;\n\nexport class Repository {\n    private db: IDatabase<any>\n    \n    constructor(db: any){\n        this.db = db\n    }\n    public async create(){\n        return this.db.none(sql.create)\n    }\n    public async add(book_id: number, paragraph_id: number, text: string, start:number, end: number ){\n        return await this.db.result(sql.add, [book_id, paragraph_id, text, start, end], (r: any) => r)\n    }\n    public async findByID ( id: number){\n       return await this.db.oneOrNone('SELECT * from highlights where id = $1', id)\n    }\n    public async remove(id: number){\n        return this.db.result(sql.remove, id, (r: IResult) =>  r.rows)\n    }\n    public async update(id: number, text: string){\n        return this.db.result(sql.update, [id, text], (r: IResult) =>  r)\n    }\n    public async get(id: number){\n        return this.db.result('SELECT * from highlights where id=$1', id, (r:IResult) => r.rows)\n    }\n    public async getAll(){\n        return this.db.result('SELECT * from highlights', [], (r:IResult) => r.rows)\n    }\n    public async getBook(book_id: number){\n        return this.db.result(sql.getBook, book_id, (r:IResult) => r.rows)\n    }\n    public async getParagraph(book_id: number, paragraph_id: number){\n        return this.db.result(sql.getParagraph, [book_id, paragraph_id], (r:IResult) => r.rows)\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/db/repos/highlights.ts","import { IDatabase } from \"pg-promise\"\nimport sqlProvider from \"../sql\"\nimport IDBParagraph from '../../interfaces/db-paragraph'\nimport IResult from \"../../interfaces/result\"\nimport * as pgp from \"pg-promise\"\nconst sql = sqlProvider.paragraphs;\n\nexport class Repository {\n    private db: IDatabase<any>\n    \n    constructor(db: any){\n        this.db = db\n    }\n    public async create():Promise<any>{\n        return this.db.none(sql.create)\n    }\n    public async add(book_id: number, paragraph: string):Promise<IResult>{\n        return await this.db.result(sql.add, [book_id, paragraph], (r: IResult) => r.rows)\n    }\n    public async findByID ( id: number):Promise<any>{\n       return await this.db.oneOrNone('SELECT * from texts where id = $1', id)\n    }\n    public async remove(id: number):Promise<IResult>{\n        return this.db.result(sql.remove, id, (r: IResult) =>  r.rows)\n    }\n    public async update(id: number, paragraph: string):Promise<IResult>{\n        return this.db.result(sql.update, [id, paragraph], (r: IResult) =>  r.rows)\n    }\n    public async get(id: number):Promise<IResult>{\n        return this.db.result('SELECT * from paragraphs where id=$1', id, (r:IResult) => r.rows)\n    }\n    public async getAll():Promise<any>{\n        return this.db.result('SELECT * from paragraphs', [] , (r:IResult) => r.rows)\n    }\n    public async getBook(book_id: number):Promise<IResult>{\n        return this.db.result(sql.getBook, book_id, (r:IResult)=> r.rows)\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/db/repos/paragraphs.ts","import { Next } from \"restify\";\nimport { BadRequestError } from \"restify-errors\";\nimport { Post, Get, Controller } from \"inversify-restify-utils\";\nimport { injectable, inject } from \"inversify\";\nimport { IDatabase } from \"pg-promise\";\nimport __, { API_BASE } from \"../config/constants\";\nimport Validate from \"../validate\";\nimport { IExtensions } from \"../db/index\";\nimport IController from \"../interfaces/controller\";\nimport IUserService from \"../interfaces/user-service\";\nimport ILogger from \"../interfaces/logger\";\nimport ILoggerFactory from \"../interfaces/logger-factory\";\nimport IRes from \"../interfaces/res\";\nimport IReq from \"../interfaces/req\";\n\n@injectable()\n@Controller(`${API_BASE}/users`)\nclass UsersController implements IController {\n    private logger: ILogger;\n    userService: any;\n    db: any;\n\n    constructor( @inject(__.LoggerFactory) LoggerFactory: ILoggerFactory,\n        @inject(__.UserService) userService: IUserService,\n        @inject(__.Database) db: IDatabase<IExtensions> & IExtensions\n    ) {\n        this.userService = userService;\n        this.db = db;\n        this.logger = LoggerFactory.getLogger(this)\n    }\n\n    @Get('/')\n    private async get(req: IReq, res: IRes, next: Next) {\n        const users = await this.userService.getAll();\n        return users;\n    }\n\n    @Validate\n    @Post('/add')\n    private async create(req: IReq, res: IRes, next: Next) {\n        const id = await this.userService.add(req.body);\n        const user = await this.userService.findById(id);\n        res.send(200, user);\n        return next()\n    }\n\n    @Post('/empty')\n    private async empty(req: IReq, res: IRes, next: Next) {\n        await this.userService.empty();\n        res.send(200);\n        return next();\n    }\n\n    @Validate\n    @Post('/authenticate')\n    private async authenticate(req: IReq, res: IRes, next: Next) {\n        const user = await this.userService.findByEmail(req.body.email)\n        if (!user) {\n            return next(new BadRequestError('User not found'))\n        }\n\n        const session = await this.userService.authenticate(req.body.password, user);\n        res.send({ id_token: session });\n        return next()\n    }\n}\n\nexport default UsersController\n\n\n\n// WEBPACK FOOTER //\n// ./src/controllers/users.ts","import { IDatabase } from \"pg-promise\";\nimport { injectable, inject } from \"inversify\";\nimport { hash, compare } from \"bcrypt\";\nimport { Validator } from \"validator.ts/Validator\";\nimport { IsLength, IsEmail, IsNumeric } from \"validator.ts/decorator/Validation\";\nimport { promisify } from \"bluebird\";\nimport __ from \"../config/constants\";\nimport { IExtensions } from \"../db\";\nimport ISessionService from \"../interfaces/session-service\";\nimport IUserService from \"../interfaces/user-service\";\nimport ILogger from \"../interfaces/logger\";\nimport ILoggerFactory from \"../interfaces/logger-factory\";\nimport IUser from \"../interfaces/user\";\n\nconst validator = new Validator();\nconst SALT_WORK_FACTOR = 10;\nconst hashAsync = promisify(hash);\nconst compareAsync = promisify(compare);\n\n\n@injectable()\nclass UserService implements IUserService {\n    private logger: ILogger;\n    db: any;\n    session: any;\n    public constructor(\n        @inject(__.LoggerFactory) LoggerFactory: ILoggerFactory,\n        @inject(__.Database) db: IDatabase<IExtensions> & IExtensions,\n        @inject(__.SessionService) session: ISessionService\n    ) {\n        this.session = session;\n        this.db = db;\n        console.log(\"Getlogger\")\n        this.logger = LoggerFactory.getLogger(this)\n    }\n\n    public async onBootstrap() {\n        this.logger.info('create users table');\n        await this.db.users.create();\n        this.logger.info('create users view')\n        await this.db.users.createUsersView();\n    }\n\n    public async findByEmail(email: string) {\n        return this.db.users.findByEmail(email);\n    }\n\n    public async findById(id: Number | string) {\n        return this.db.users.find(+id);\n    }\n\n    public async getAll() {\n        return this.db.users.all()\n    }\n\n    public async add(req: IUser): Promise<Number> {\n        console.log(\"REquest\", req)\n        const emailExists = await this.db.users.findByEmail(req.email);\n        if (emailExists) {\n            throw new Error('Email already exists')\n        }\n\n        req.password = await hashAsync(req.password, SALT_WORK_FACTOR)\n\n        const id = await this.db.users.add(req)\n        return id\n    }\n\n    public async updatePassword(userId: number, oldPassword: string, newPassword: string) {\n        const user = <IUser>await this.db.users.find(userId);\n        const passwordHash = <string>user.password;\n        const candidateHash = await hashAsync(oldPassword, SALT_WORK_FACTOR);\n        const valid = await compareAsync(candidateHash, passwordHash);\n        if (valid) {\n            return this.db.users.updatePassword(newPassword, userId)\n        }\n\n        return Promise.reject(new Error())\n    }\n\n    public async authenticate(candidate: string, user: IUser): Promise<String> {\n        const { password } = await this.db.users.findPasswordHashById(+user.id);\n        if (!hash) {\n            return Promise.reject(new Error('User not found'))\n        }\n        const auth = await compareAsync(candidate, password);\n        const session = await this.session.setSession(user);\n        return session\n    }\n\n    public async empty() {\n        return this.db.users.empty()\n    }\n}\n\nclass ValidateUserReq {\n    @IsNumeric()\n    _id: String;\n    set id(id: Number) {\n        this._id = id + ''\n    }\n\n    @IsLength(6, 20)\n    password: String\n}\n\nexport class User {\n    @IsLength(6, 20)\n    username: String;\n\n    @IsEmail()\n    email: String;\n\n    @IsLength(6, 20)\n    password: String;\n\n    @IsLength(3, 20)\n    fname: String;\n\n    @IsLength(3, 20)\n    lname: String;\n}\n\nexport default UserService\n\n\n\n// WEBPACK FOOTER //\n// ./src/services/user.ts","module.exports = require(\"bcrypt\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"bcrypt\"\n// module id = 44\n// module chunks = 0","import { injectable, inject } from \"inversify\";\nimport { sign, verify } from \"jsonwebtoken\";\nimport { readFileSync } from \"fs\";\nimport * as path from \"path\";\nimport { v4 as uuid } from \"node-uuid\";\nimport __ from \"../config/constants\";\nimport ISessionService from \"../interfaces/session-service\";\nimport ICacheService from \"../interfaces/cache-service\";\nimport ILogger from \"../interfaces/logger\";\nimport ILoggerFactory from \"../interfaces/logger-factory\";\nimport IUser from \"../interfaces/user\";\n\ndeclare var process: any;\n\nconst KEY_FILE = path.resolve(process.cwd(), 'keys');\n\n// TODO: CHANGE KEYS\nconst PRIVATE_KEY = readFileSync(`${KEY_FILE}/privkey.pem`);\nconst PUBLIC_KEY = readFileSync(`${KEY_FILE}/pubkey.pem`);\n\n@injectable()\nclass SessionService implements ISessionService {\n    private logger: ILogger;\n    cache: any;\n    public constructor( @inject(__.LoggerFactory) LoggerFactory: ILoggerFactory,\n        @inject(__.CacheService) cache: ICacheService\n    ) {\n        this.logger = LoggerFactory.getLogger(this)\n        this.cache = cache;\n    }\n\n    public async getSession(token: string): Promise<string | Error> {\n        return new Promise((resolve, reject) => {\n            verify(token, PUBLIC_KEY, (err: any, decoded) => {\n                if (err) {\n                    reject(err);\n                    return\n                }\n\n                resolve(decoded)\n            })\n        })\n    }\n\n    public async setSession(user: IUser): Promise<String> {\n        const sessionId = uuid();\n        const token = sign({ ['session-id']: sessionId }, PRIVATE_KEY, { algorithm: 'RS256' });\n        await this.cache.set(sessionId, JSON.stringify(user));\n        return token\n    }\n\n    public async clearSession() {\n\n    }\n}\n\nexport default SessionService\n\n\n\n// WEBPACK FOOTER //\n// ./src/services/session.ts","module.exports = require(\"jsonwebtoken\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"jsonwebtoken\"\n// module id = 46\n// module chunks = 0","module.exports = require(\"node-uuid\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"node-uuid\"\n// module id = 47\n// module chunks = 0","import {injectable, inject} from \"inversify\";\nimport {createClient, RedisClient} from \"redis\";\nimport __ from \"../config/constants\";\nimport ILoggerFactory from \"../interfaces/logger-factory\";\nimport ILogger from \"../interfaces/logger\";\nimport ICacheService from \"../interfaces/cache-service\";\n\ndeclare var process:any;\n\n@injectable()\nclass CacheService implements  ICacheService{\n    private client: RedisClient;\n    private logger: ILogger;\n\n    public constructor( @inject(__.LoggerFactory) LoggerFactory: ILoggerFactory) {\n        this.logger = LoggerFactory.getLogger(this);\n\n    }\n\n    public async onBootstrap() {\n        return new Promise((resolve, reject) => {\n            this.logger.info('connecting to redis');\n            this.client = createClient();\n\n            Reflect.get(this.client, 'on').call(this, 'ready', () => {\n                this.logger.info('connected');\n                resolve(true)\n            });\n            Reflect.get(this.client, 'on').call(this, 'err', (err: Error) => {\n                this.logger.error(err);\n                reject(false)\n            });\n            Reflect.get(this.client, 'on').call(this, 'reconnecting', (err: Error) =>\n                this.logger.info(`reconnecting ${err ? 'err=' + err : ''}`));\n        })\n\n    }\n\n    public async get(key: string) {\n        return new Promise((resolve, reject) => {\n            this.client.get(key, (err, value) => {\n                if (err) {\n                    reject(err);\n                    return\n                }\n\n                const str = <string> value\n                resolve(str)\n            })\n        })\n    }\n\n    public async set(key: string, value: string) {\n        const time = Date.now();\n        return new Promise((resolve, reject) => {\n            this.client.set(key, value, (err, value) => {\n                if (err) {\n                    reject(err);\n                    return\n                }\n\n                this.logger.info(`key=${key} time=${Date.now() - time}`);\n                resolve(true)\n            })\n        })\n    }\n}\n\nexport default CacheService\n\n\n// WEBPACK FOOTER //\n// ./src/services/cache.ts","module.exports = require(\"redis\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"redis\"\n// module id = 49\n// module chunks = 0"],"sourceRoot":""}